syntax = "proto2";

package sql_query_grammar;

enum SQLFunc {
  FUNCBIT_AND = 1;
  FUNCBIT_OR = 2;
  FUNCBIT_XOR = 3;
  FUNCBLAKE3 = 4;
  FUNCCAST = 5;
  FUNCCHARACTER_LENGTH = 6;
  FUNCCHAR_LENGTH = 7;
  FUNCCOVAR_POP = 8;
  FUNCCOVAR_SAMP = 9;
  FUNCCRC32 = 10;
  FUNCCRC32IEEE = 11;
  FUNCCRC64 = 12;
  FUNCDATABASE = 13;
  FUNCDATE = 14;
  FUNCDATE_FORMAT = 15;
  FUNCDATE_TRUNC = 16;
  FUNCDAY = 17;
  FUNCDAYOFMONTH = 18;
  FUNCDAYOFWEEK = 19;
  FUNCDAYOFYEAR = 20;
  FUNCFORMAT_BYTES = 21;
  FUNCFQDN = 22;
  FUNCFROM_BASE64 = 23;
  FUNCFROM_DAYS = 24;
  FUNCFROM_UNIXTIME = 25;
  FUNCHOUR = 26;
  FUNCINET6_ATON = 27;
  FUNCINET6_NTOA = 28;
  FUNCINET_ATON = 29;
  FUNCINET_NTOA = 30;
  FUNCIPv4CIDRToRange = 31;
  FUNCIPv4NumToString = 32;
  FUNCIPv4NumToStringClassC = 33;
  FUNCIPv4StringToNum = 34;
  FUNCIPv4ToIPv6 = 35;
  FUNCIPv6CIDRToRange = 36;
  FUNCIPv6NumToString = 37;
  FUNCIPv6StringToNum = 38;
  FUNCJSONAllPaths = 39;
  FUNCJSONAllPathsWithTypes = 40;
  FUNCJSONArrayLength = 41;
  FUNCJSONDynamicPaths = 42;
  FUNCJSONDynamicPathsWithTypes = 43;
  FUNCJSONEmpty = 44;
  FUNCJSONExtract = 45;
  FUNCJSONExtractArrayRaw = 46;
  FUNCJSONExtractBool = 47;
  FUNCJSONExtractFloat = 48;
  FUNCJSONExtractInt = 49;
  FUNCJSONExtractKeys = 50;
  FUNCJSONExtractKeysAndValues = 51;
  FUNCJSONExtractKeysAndValuesRaw = 52;
  FUNCJSONExtractRaw = 53;
  FUNCJSONExtractString = 54;
  FUNCJSONExtractUInt = 55;
  FUNCJSONHas = 56;
  FUNCJSONKey = 57;
  FUNCJSONLength = 58;
  FUNCJSONSharedDataPaths = 59;
  FUNCJSONSharedDataPathsWithTypes = 60;
  FUNCJSONType = 61;
  FUNCJSON_ARRAY_LENGTH = 62;
  FUNCJSON_EXISTS = 63;
  FUNCJSON_QUERY = 64;
  FUNCJSON_VALUE = 65;
  FUNCL1Distance = 66;
  FUNCL1Norm = 67;
  FUNCL1Normalize = 68;
  FUNCL2Distance = 69;
  FUNCL2Norm = 70;
  FUNCL2Normalize = 71;
  FUNCL2SquaredDistance = 72;
  FUNCL2SquaredNorm = 73;
  FUNCLAST_DAY = 74;
  FUNCLinfDistance = 75;
  FUNCLinfNorm = 76;
  FUNCLinfNormalize = 77;
  FUNCLpDistance = 78;
  FUNCLpNorm = 79;
  FUNCLpNormalize = 80;
  FUNCMACNumToString = 81;
  FUNCMACStringToNum = 82;
  FUNCMACStringToOUI = 83;
  FUNCMAP_FROM_ARRAYS = 84;
  FUNCMD4 = 85;
  FUNCMD5 = 86;
  FUNCMILLISECOND = 87;
  FUNCMINUTE = 88;
  FUNCMONTH = 89;
  FUNCOCTET_LENGTH = 90;
  FUNCQUARTER = 91;
  FUNCREGEXP_EXTRACT = 92;
  FUNCREGEXP_MATCHES = 93;
  FUNCREGEXP_REPLACE = 94;
  FUNCSCHEMA = 95;
  FUNCSECOND = 96;
  FUNCSHA1 = 97;
  FUNCSHA224 = 98;
  FUNCSHA256 = 99;
  FUNCSHA384 = 100;
  FUNCSHA512 = 101;
  FUNCSHA512_256 = 102;
  FUNCSTD = 103;
  FUNCSTDDEV_POP = 104;
  FUNCSTDDEV_SAMP = 105;
  FUNCSUBSTRING_INDEX = 106;
  FUNCTO_BASE64 = 107;
  FUNCTO_DAYS = 108;
  FUNCTO_UNIXTIME = 109;
  FUNCULIDStringToDateTime = 110;
  FUNCURLHash = 111;
  FUNCURLHierarchy = 112;
  FUNCURLPathHierarchy = 113;
  FUNCUTCTimestamp = 114;
  FUNCUTC_timestamp = 115;
  FUNCUUIDNumToString = 116;
  FUNCUUIDStringToNum = 117;
  FUNCUUIDToNum = 118;
  FUNCUUIDv7ToDateTime = 119;
  FUNCVAR_POP = 120;
  FUNCVAR_SAMP = 121;
  FUNCYEAR = 122;
  FUNCYYYYMMDDToDate = 123;
  FUNCYYYYMMDDToDate32 = 124;
  FUNCYYYYMMDDhhmmssToDateTime = 125;
  FUNCYYYYMMDDhhmmssToDateTime64 = 126;
  FUNCabs = 127;
  FUNCaccurateCast = 128;
  FUNCacos = 129;
  FUNCacosh = 130;
  FUNCaddDate = 131;
  FUNCaddDays = 132;
  FUNCaddHours = 133;
  FUNCaddInterval = 134;
  FUNCaddMicroseconds = 135;
  FUNCaddMilliseconds = 136;
  FUNCaddMinutes = 137;
  FUNCaddMonths = 138;
  FUNCaddNanoseconds = 139;
  FUNCaddQuarters = 140;
  FUNCaddSeconds = 141;
  FUNCaddTupleOfIntervals = 142;
  FUNCaddWeeks = 143;
  FUNCaddYears = 144;
  FUNCaddressToLine = 145;
  FUNCaddressToLineWithInlines = 146;
  FUNCaddressToSymbol = 147;
  FUNCaes_decrypt_mysql = 148;
  FUNCaes_encrypt_mysql = 149;
  FUNCage = 150;
  FUNCaggThrow = 151;
  FUNCalphaTokens = 152;
  FUNCanalysisOfVariance = 153;
  FUNCand = 154;
  FUNCanova = 155;
  FUNCany = 156;
  FUNCanyHeavy = 157;
  FUNCanyLast = 158;
  FUNCany_value = 159;
  FUNCappendTrailingCharIfAbsent = 160;
  FUNCapprox_top_count = 161;
  FUNCapprox_top_k = 162;
  FUNCapprox_top_sum = 163;
  FUNCargMax = 164;
  FUNCargMin = 165;
  FUNCarrayAUC = 166;
  FUNCarrayAll = 167;
  FUNCarrayAvg = 168;
  FUNCarrayCompact = 169;
  FUNCarrayConcat = 170;
  FUNCarrayCount = 171;
  FUNCarrayCumSum = 172;
  FUNCarrayCumSumNonNegative = 173;
  FUNCarrayDifference = 174;
  FUNCarrayDistinct = 175;
  FUNCarrayDotProduct = 176;
  FUNCarrayElement = 177;
  FUNCarrayEnumerate = 178;
  FUNCarrayEnumerateDense = 179;
  FUNCarrayEnumerateDenseRanked = 180;
  FUNCarrayEnumerateUniq = 181;
  FUNCarrayEnumerateUniqRanked = 182;
  FUNCarrayExists = 183;
  FUNCarrayFill = 184;
  FUNCarrayFilter = 185;
  FUNCarrayFirst = 186;
  FUNCarrayFirstIndex = 187;
  FUNCarrayFirstOrNull = 188;
  FUNCarrayFlatten = 189;
  FUNCarrayFold = 190;
  FUNCarrayIntersect = 191;
  FUNCarrayJaccardIndex = 192;
  FUNCarrayJoin = 193;
  FUNCarrayLast = 194;
  FUNCarrayLastIndex = 195;
  FUNCarrayLastOrNull = 196;
  FUNCarrayMap = 197;
  FUNCarrayMax = 198;
  FUNCarrayMin = 199;
  FUNCarrayPartialReverseSort = 200;
  FUNCarrayPartialShuffle = 201;
  FUNCarrayPartialSort = 202;
  FUNCarrayPopBack = 203;
  FUNCarrayPopFront = 204;
  FUNCarrayProduct = 205;
  FUNCarrayPushBack = 206;
  FUNCarrayPushFront = 207;
  FUNCarrayRandomSample = 208;
  FUNCarrayReduce = 209;
  FUNCarrayReduceInRanges = 210;
  FUNCarrayResize = 211;
  FUNCarrayReverse = 212;
  FUNCarrayReverseFill = 213;
  FUNCarrayReverseSort = 214;
  FUNCarrayReverseSplit = 215;
  FUNCarrayRotateLeft = 216;
  FUNCarrayRotateRight = 217;
  FUNCarrayShiftLeft = 218;
  FUNCarrayShiftRight = 219;
  FUNCarrayShingles = 220;
  FUNCarrayShuffle = 221;
  FUNCarraySlice = 222;
  FUNCarraySort = 223;
  FUNCarraySplit = 224;
  FUNCarrayStringConcat = 225;
  FUNCarraySum = 226;
  FUNCarrayUniq = 227;
  FUNCarrayWithConstant = 228;
  FUNCarrayZip = 229;
  FUNCarray_agg = 230;
  FUNCarray_concat_agg = 231;
  FUNCascii = 232;
  FUNCasin = 233;
  FUNCasinh = 234;
  FUNCassumeNotNull = 235;
  FUNCatan = 236;
  FUNCatan2 = 237;
  FUNCatanh = 238;
  FUNCavg = 239;
  FUNCavgWeighted = 240;
  FUNCbar = 241;
  FUNCbase58Decode = 242;
  FUNCbase58Encode = 243;
  FUNCbase64Decode = 244;
  FUNCbase64Encode = 245;
  FUNCbase64URLDecode = 246;
  FUNCbase64URLEncode = 247;
  FUNCbasename = 248;
  FUNCbin = 249;
  FUNCbitAnd = 250;
  FUNCbitCount = 251;
  FUNCbitHammingDistance = 252;
  FUNCbitNot = 253;
  FUNCbitOr = 254;
  FUNCbitPositionsToArray = 255;
  FUNCbitRotateLeft = 256;
  FUNCbitRotateRight = 257;
  FUNCbitShiftLeft = 258;
  FUNCbitShiftRight = 259;
  FUNCbitSlice = 260;
  FUNCbitTest = 261;
  FUNCbitTestAll = 262;
  FUNCbitTestAny = 263;
  FUNCbitXor = 264;
  FUNCbitmapAnd = 265;
  FUNCbitmapAndCardinality = 266;
  FUNCbitmapAndnot = 267;
  FUNCbitmapAndnotCardinality = 268;
  FUNCbitmapBuild = 269;
  FUNCbitmapCardinality = 270;
  FUNCbitmapContains = 271;
  FUNCbitmapHasAll = 272;
  FUNCbitmapHasAny = 273;
  FUNCbitmapMax = 274;
  FUNCbitmapMin = 275;
  FUNCbitmapOr = 276;
  FUNCbitmapOrCardinality = 277;
  FUNCbitmapSubsetInRange = 278;
  FUNCbitmapSubsetLimit = 279;
  FUNCbitmapToArray = 280;
  FUNCbitmapTransform = 281;
  FUNCbitmapXor = 282;
  FUNCbitmapXorCardinality = 283;
  FUNCbitmaskToArray = 284;
  FUNCbitmaskToList = 285;
  FUNCblockNumber = 286;
  FUNCblockSerializedSize = 287;
  FUNCblockSize = 288;
  FUNCboundingRatio = 289;
  FUNCbuildId = 290;
  FUNCbyteHammingDistance = 291;
  FUNCbyteSize = 292;
  FUNCbyteSlice = 293;
  FUNCbyteSwap = 294;
  FUNCcaseWithExpr = 295;
  FUNCcaseWithExpression = 296;
  FUNCcaseWithoutExpr = 297;
  FUNCcaseWithoutExpression = 298;
  FUNCcatboostEvaluate = 299;
  FUNCcategoricalInformationValue = 300;
  FUNCcbrt = 301;
  FUNCceil = 302;
  FUNCceiling = 303;
  FUNCchangeDay = 304;
  FUNCchangeHour = 305;
  FUNCchangeMinute = 306;
  FUNCchangeMonth = 307;
  FUNCchangeSecond = 308;
  FUNCchangeYear = 309;
  FUNCchar = 310;
  FUNCcityHash64 = 311;
  FUNCclamp = 312;
  FUNCcoalesce = 313;
  FUNCconcat = 314;
  FUNCconcatAssumeInjective = 315;
  FUNCconcatWithSeparator = 316;
  FUNCconcatWithSeparatorAssumeInjective = 317;
  FUNCconcat_ws = 318;
  FUNCconnectionId = 319;
  FUNCconnection_id = 320;
  FUNCcontingency = 321;
  FUNCconvertCharset = 322;
  FUNCcorr = 323;
  FUNCcorrMatrix = 324;
  FUNCcorrStable = 325;
  FUNCcos = 326;
  FUNCcosh = 327;
  FUNCcosineDistance = 328;
  FUNCcount = 329;
  FUNCcountDigits = 330;
  FUNCcountEqual = 331;
  FUNCcountMatches = 332;
  FUNCcountMatchesCaseInsensitive = 333;
  FUNCcountSubstrings = 334;
  FUNCcountSubstringsCaseInsensitive = 335;
  FUNCcountSubstringsCaseInsensitiveUTF8 = 336;
  FUNCcovarPop = 337;
  FUNCcovarPopMatrix = 338;
  FUNCcovarPopStable = 339;
  FUNCcovarSamp = 340;
  FUNCcovarSampMatrix = 341;
  FUNCcovarSampStable = 342;
  FUNCcramersV = 343;
  FUNCcramersVBiasCorrected = 344;
  FUNCcurdate = 345;
  FUNCcurrentDatabase = 346;
  FUNCcurrentProfiles = 347;
  FUNCcurrentRoles = 348;
  FUNCcurrentSchemas = 349;
  FUNCcurrentUser = 350;
  FUNCcurrent_database = 351;
  FUNCcurrent_date = 352;
  FUNCcurrent_schemas = 353;
  FUNCcurrent_timestamp = 354;
  FUNCcurrent_user = 355;
  FUNCcutFragment = 356;
  FUNCcutIPv6 = 357;
  FUNCcutQueryString = 358;
  FUNCcutQueryStringAndFragment = 359;
  FUNCcutToFirstSignificantSubdomain = 360;
  FUNCcutToFirstSignificantSubdomainCustom = 361;
  FUNCcutToFirstSignificantSubdomainCustomRFC = 362;
  FUNCcutToFirstSignificantSubdomainCustomWithWWW = 363;
  FUNCcutToFirstSignificantSubdomainCustomWithWWWRFC = 364;
  FUNCcutToFirstSignificantSubdomainRFC = 365;
  FUNCcutToFirstSignificantSubdomainWithWWW = 366;
  FUNCcutToFirstSignificantSubdomainWithWWWRFC = 367;
  FUNCcutURLParameter = 368;
  FUNCcutWWW = 369;
  FUNCdamerauLevenshteinDistance = 370;
  FUNCdateDiff = 371;
  FUNCdateName = 372;
  FUNCdateTime64ToSnowflake = 373;
  FUNCdateTime64ToSnowflakeID = 374;
  FUNCdateTimeToSnowflake = 375;
  FUNCdateTimeToSnowflakeID = 376;
  FUNCdateTrunc = 377;
  FUNCdate_add = 378;
  FUNCdate_diff = 379;
  FUNCdate_sub = 380;
  FUNCdecodeHTMLComponent = 381;
  FUNCdecodeURLComponent = 382;
  FUNCdecodeURLFormComponent = 383;
  FUNCdecodeXMLComponent = 384;
  FUNCdecrypt = 385;
  FUNCdefaultProfiles = 386;
  FUNCdefaultRoles = 387;
  FUNCdefaultValueOfArgumentType = 388;
  FUNCdefaultValueOfTypeName = 389;
  FUNCdegrees = 390;
  FUNCdeltaSum = 391;
  FUNCdeltaSumTimestamp = 392;
  FUNCdemangle = 393;
  FUNCdenseRank = 394;
  FUNCdense_rank = 395;
  FUNCdetectCharset = 396;
  FUNCdetectLanguage = 397;
  FUNCdetectLanguageMixed = 398;
  FUNCdetectLanguageUnknown = 399;
  FUNCdetectProgrammingLanguage = 400;
  FUNCdetectTonality = 401;
  FUNCdictGet = 402;
  FUNCdictGetAll = 403;
  FUNCdictGetChildren = 404;
  FUNCdictGetDate = 405;
  FUNCdictGetDateTime = 406;
  FUNCdictGetDescendants = 407;
  FUNCdictGetFloat32 = 408;
  FUNCdictGetFloat64 = 409;
  FUNCdictGetHierarchy = 410;
  FUNCdictGetIPv4 = 411;
  FUNCdictGetIPv6 = 412;
  FUNCdictGetInt16 = 413;
  FUNCdictGetInt32 = 414;
  FUNCdictGetInt64 = 415;
  FUNCdictGetInt8 = 416;
  FUNCdictGetString = 417;
  FUNCdictGetUInt16 = 418;
  FUNCdictGetUInt32 = 419;
  FUNCdictGetUInt64 = 420;
  FUNCdictGetUInt8 = 421;
  FUNCdictGetUUID = 422;
  FUNCdictHas = 423;
  FUNCdictIsIn = 424;
  FUNCdisplayName = 425;
  FUNCdistanceL1 = 426;
  FUNCdistanceL2 = 427;
  FUNCdistanceL2Squared = 428;
  FUNCdistanceLinf = 429;
  FUNCdistanceLp = 430;
  FUNCdistinctDynamicTypes = 431;
  FUNCdistinctJSONPaths = 432;
  FUNCdistinctJSONPathsAndTypes = 433;
  FUNCdivide = 434;
  FUNCdivideDecimal = 435;
  FUNCdomain = 436;
  FUNCdomainRFC = 437;
  FUNCdomainWithoutWWW = 438;
  FUNCdomainWithoutWWWRFC = 439;
  FUNCdotProduct = 440;
  FUNCdumpColumnStructure = 441;
  FUNCdynamicElement = 442;
  FUNCdynamicType = 443;
  FUNCe = 444;
  FUNCeditDistance = 445;
  FUNCeditDistanceUTF8 = 446;
  FUNCempty = 447;
  FUNCemptyArrayDate = 448;
  FUNCemptyArrayDateTime = 449;
  FUNCemptyArrayFloat32 = 450;
  FUNCemptyArrayFloat64 = 451;
  FUNCemptyArrayInt16 = 452;
  FUNCemptyArrayInt32 = 453;
  FUNCemptyArrayInt64 = 454;
  FUNCemptyArrayInt8 = 455;
  FUNCemptyArrayString = 456;
  FUNCemptyArrayToSingle = 457;
  FUNCemptyArrayUInt16 = 458;
  FUNCemptyArrayUInt32 = 459;
  FUNCemptyArrayUInt64 = 460;
  FUNCemptyArrayUInt8 = 461;
  FUNCenabledProfiles = 462;
  FUNCenabledRoles = 463;
  FUNCencodeURLComponent = 464;
  FUNCencodeURLFormComponent = 465;
  FUNCencodeXMLComponent = 466;
  FUNCencrypt = 467;
  FUNCendsWith = 468;
  FUNCendsWithUTF8 = 469;
  FUNCentropy = 470;
  FUNCequals = 471;
  FUNCerf = 472;
  FUNCerfc = 473;
  FUNCerrorCodeToName = 474;
  FUNCevalMLMethod = 475;
  FUNCexp = 476;
  FUNCexp10 = 477;
  FUNCexp2 = 478;
  FUNCexponentialMovingAverage = 479;
  FUNCexponentialTimeDecayedAvg = 480;
  FUNCexponentialTimeDecayedCount = 481;
  FUNCexponentialTimeDecayedMax = 482;
  FUNCexponentialTimeDecayedSum = 483;
  FUNCextract = 484;
  FUNCextractAll = 485;
  FUNCextractAllGroups = 486;
  FUNCextractAllGroupsHorizontal = 487;
  FUNCextractAllGroupsVertical = 488;
  FUNCextractGroups = 489;
  FUNCextractKeyValuePairs = 490;
  FUNCextractKeyValuePairsWithEscaping = 491;
  FUNCextractTextFromHTML = 492;
  FUNCextractURLParameter = 493;
  FUNCextractURLParameterNames = 494;
  FUNCextractURLParameters = 495;
  FUNCfactorial = 496;
  FUNCfarmFingerprint64 = 497;
  FUNCfarmHash64 = 498;
  FUNCfile = 499;
  FUNCfilesystemAvailable = 500;
  FUNCfilesystemCapacity = 501;
  FUNCfilesystemUnreserved = 502;
  FUNCfinalizeAggregation = 503;
  FUNCfirstLine = 504;
  FUNCfirstSignificantSubdomain = 505;
  FUNCfirstSignificantSubdomainCustom = 506;
  FUNCfirstSignificantSubdomainCustomRFC = 507;
  FUNCfirstSignificantSubdomainRFC = 508;
  FUNCfirst_value = 509;
  FUNCflameGraph = 510;
  FUNCflatten = 511;
  FUNCflattenTuple = 512;
  FUNCfloor = 513;
  FUNCformat = 514;
  FUNCformatDateTime = 515;
  FUNCformatDateTimeInJodaSyntax = 516;
  FUNCformatQuery = 517;
  FUNCformatQuerySingleLine = 518;
  FUNCformatReadableDecimalSize = 519;
  FUNCformatReadableQuantity = 520;
  FUNCformatReadableSize = 521;
  FUNCformatReadableTimeDelta = 522;
  FUNCformatRow = 523;
  FUNCformatRowNoNewline = 524;
  FUNCfragment = 525;
  FUNCfromDaysSinceYearZero = 526;
  FUNCfromDaysSinceYearZero32 = 527;
  FUNCfromModifiedJulianDay = 528;
  FUNCfromModifiedJulianDayOrNull = 529;
  FUNCfromUTCTimestamp = 530;
  FUNCfromUnixTimestamp = 531;
  FUNCfromUnixTimestamp64Micro = 532;
  FUNCfromUnixTimestamp64Milli = 533;
  FUNCfromUnixTimestamp64Nano = 534;
  FUNCfromUnixTimestampInJodaSyntax = 535;
  FUNCfrom_utc_timestamp = 536;
  FUNCfullHostName = 537;
  FUNCfuzzBits = 538;
  FUNCgccMurmurHash = 539;
  FUNCgcd = 540;
  FUNCgenerateRandomStructure = 541;
  FUNCgenerateSnowflakeID = 542;
  FUNCgenerateULID = 543;
  FUNCgenerateUUIDv4 = 544;
  FUNCgenerateUUIDv7 = 545;
  FUNCgeoDistance = 546;
  FUNCgeoToH3 = 547;
  FUNCgeoToS2 = 548;
  FUNCgeohashDecode = 549;
  FUNCgeohashEncode = 550;
  FUNCgeohashesInBox = 551;
  FUNCgetClientHTTPHeader = 552;
  FUNCgetMacro = 553;
  FUNCgetOSKernelVersion = 554;
  FUNCgetServerPort = 555;
  FUNCgetSetting = 556;
  FUNCgetSizeOfEnumType = 557;
  FUNCgetSubcolumn = 558;
  FUNCgetTypeSerializationStreams = 559;
  FUNCglobalIn = 560;
  FUNCglobalInIgnoreSet = 561;
  FUNCglobalNotIn = 562;
  FUNCglobalNotInIgnoreSet = 563;
  FUNCglobalNotNullIn = 564;
  FUNCglobalNotNullInIgnoreSet = 565;
  FUNCglobalNullIn = 566;
  FUNCglobalNullInIgnoreSet = 567;
  FUNCglobalVariable = 568;
  FUNCgreatCircleAngle = 569;
  FUNCgreatCircleDistance = 570;
  FUNCgreater = 571;
  FUNCgreaterOrEquals = 572;
  FUNCgreatest = 573;
  FUNCgroupArray = 574;
  FUNCgroupArrayInsertAt = 575;
  FUNCgroupArrayIntersect = 576;
  FUNCgroupArrayLast = 577;
  FUNCgroupArrayMovingAvg = 578;
  FUNCgroupArrayMovingSum = 579;
  FUNCgroupArraySample = 580;
  FUNCgroupArraySorted = 581;
  FUNCgroupBitAnd = 582;
  FUNCgroupBitOr = 583;
  FUNCgroupBitXor = 584;
  FUNCgroupBitmap = 585;
  FUNCgroupBitmapAnd = 586;
  FUNCgroupBitmapOr = 587;
  FUNCgroupBitmapXor = 588;
  FUNCgroupConcat = 589;
  FUNCgroupUniqArray = 590;
  FUNCgroup_concat = 591;
  FUNCgrouping = 592;
  FUNCh3CellAreaM2 = 593;
  FUNCh3CellAreaRads2 = 594;
  FUNCh3Distance = 595;
  FUNCh3EdgeAngle = 596;
  FUNCh3EdgeLengthKm = 597;
  FUNCh3EdgeLengthM = 598;
  FUNCh3ExactEdgeLengthKm = 599;
  FUNCh3ExactEdgeLengthM = 600;
  FUNCh3ExactEdgeLengthRads = 601;
  FUNCh3GetBaseCell = 602;
  FUNCh3GetDestinationIndexFromUnidirectionalEdge = 603;
  FUNCh3GetFaces = 604;
  FUNCh3GetIndexesFromUnidirectionalEdge = 605;
  FUNCh3GetOriginIndexFromUnidirectionalEdge = 606;
  FUNCh3GetPentagonIndexes = 607;
  FUNCh3GetRes0Indexes = 608;
  FUNCh3GetResolution = 609;
  FUNCh3GetUnidirectionalEdge = 610;
  FUNCh3GetUnidirectionalEdgeBoundary = 611;
  FUNCh3GetUnidirectionalEdgesFromHexagon = 612;
  FUNCh3HexAreaKm2 = 613;
  FUNCh3HexAreaM2 = 614;
  FUNCh3HexRing = 615;
  FUNCh3IndexesAreNeighbors = 616;
  FUNCh3IsPentagon = 617;
  FUNCh3IsResClassIII = 618;
  FUNCh3IsValid = 619;
  FUNCh3Line = 620;
  FUNCh3NumHexagons = 621;
  FUNCh3PointDistKm = 622;
  FUNCh3PointDistM = 623;
  FUNCh3PointDistRads = 624;
  FUNCh3ToCenterChild = 625;
  FUNCh3ToChildren = 626;
  FUNCh3ToGeo = 627;
  FUNCh3ToGeoBoundary = 628;
  FUNCh3ToParent = 629;
  FUNCh3ToString = 630;
  FUNCh3UnidirectionalEdgeIsValid = 631;
  FUNCh3kRing = 632;
  FUNChalfMD5 = 633;
  FUNChas = 634;
  FUNChasAll = 635;
  FUNChasAny = 636;
  FUNChasColumnInTable = 637;
  FUNChasSubsequence = 638;
  FUNChasSubsequenceCaseInsensitive = 639;
  FUNChasSubsequenceCaseInsensitiveUTF8 = 640;
  FUNChasSubsequenceUTF8 = 641;
  FUNChasSubstr = 642;
  FUNChasThreadFuzzer = 643;
  FUNChasToken = 644;
  FUNChasTokenCaseInsensitive = 645;
  FUNChasTokenCaseInsensitiveOrNull = 646;
  FUNChasTokenOrNull = 647;
  FUNChex = 648;
  FUNChilbertDecode = 649;
  FUNChilbertEncode = 650;
  FUNChistogram = 651;
  FUNChiveHash = 652;
  FUNChop = 653;
  FUNChopEnd = 654;
  FUNChopStart = 655;
  FUNChostname = 656;
  FUNChypot = 657;
  FUNCidentity = 658;
  FUNCidnaDecode = 659;
  FUNCidnaEncode = 660;
  FUNCif = 661;
  FUNCifNotFinite = 662;
  FUNCifNull = 663;
  FUNCignore = 664;
  FUNCilike = 665;
  FUNCin = 666;
  FUNCinIgnoreSet = 667;
  FUNCindexHint = 668;
  FUNCindexOf = 669;
  FUNCinitcap = 670;
  FUNCinitcapUTF8 = 671;
  FUNCinitialQueryID = 672;
  FUNCinitial_query_id = 673;
  FUNCinitializeAggregation = 674;
  FUNCinstr = 675;
  FUNCintDiv = 676;
  FUNCintDivOrZero = 677;
  FUNCintExp10 = 678;
  FUNCintExp2 = 679;
  FUNCintHash32 = 680;
  FUNCintHash64 = 681;
  FUNCintervalLengthSum = 682;
  FUNCisConstant = 683;
  FUNCisDecimalOverflow = 684;
  FUNCisFinite = 685;
  FUNCisIPAddressInRange = 686;
  FUNCisIPv4String = 687;
  FUNCisIPv6String = 688;
  FUNCisInfinite = 689;
  FUNCisNaN = 690;
  FUNCisNotDistinctFrom = 691;
  FUNCisNotNull = 692;
  FUNCisNull = 693;
  FUNCisNullable = 694;
  FUNCisValidJSON = 695;
  FUNCisValidUTF8 = 696;
  FUNCisZeroOrNull = 697;
  FUNCjaroSimilarity = 698;
  FUNCjaroWinklerSimilarity = 699;
  FUNCjavaHash = 700;
  FUNCjavaHashUTF16LE = 701;
  FUNCjoinGet = 702;
  FUNCjsonMergePatch = 703;
  FUNCjumpConsistentHash = 704;
  FUNCkafkaMurmurHash = 705;
  FUNCkolmogorovSmirnovTest = 706;
  FUNCkostikConsistentHash = 707;
  FUNCkql_array_sort_asc = 708;
  FUNCkql_array_sort_desc = 709;
  FUNCkurtPop = 710;
  FUNCkurtSamp = 711;
  FUNClagInFrame = 712;
  FUNClargestTriangleThreeBuckets = 713;
  FUNClast_value = 714;
  FUNClcase = 715;
  FUNClcm = 716;
  FUNCleadInFrame = 717;
  FUNCleast = 718;
  FUNCleft = 719;
  FUNCleftPad = 720;
  FUNCleftPadUTF8 = 721;
  FUNCleftUTF8 = 722;
  FUNClemmatize = 723;
  FUNClength = 724;
  FUNClengthUTF8 = 725;
  FUNCless = 726;
  FUNClessOrEquals = 727;
  FUNClevenshteinDistance = 728;
  FUNClevenshteinDistanceUTF8 = 729;
  FUNClgamma = 730;
  FUNClike = 731;
  FUNCln = 732;
  FUNClocate = 733;
  FUNClog = 734;
  FUNClog10 = 735;
  FUNClog1p = 736;
  FUNClog2 = 737;
  FUNClogTrace = 738;
  FUNClowCardinalityIndices = 739;
  FUNClowCardinalityKeys = 740;
  FUNClower = 741;
  FUNClowerUTF8 = 742;
  FUNClpad = 743;
  FUNCltrim = 744;
  FUNClttb = 745;
  FUNCmakeDate = 746;
  FUNCmakeDate32 = 747;
  FUNCmakeDateTime = 748;
  FUNCmakeDateTime64 = 749;
  FUNCmannWhitneyUTest = 750;
  FUNCmap = 751;
  FUNCmapAdd = 752;
  FUNCmapAll = 753;
  FUNCmapApply = 754;
  FUNCmapConcat = 755;
  FUNCmapContains = 756;
  FUNCmapContainsKeyLike = 757;
  FUNCmapExists = 758;
  FUNCmapExtractKeyLike = 759;
  FUNCmapFilter = 760;
  FUNCmapFromArrays = 761;
  FUNCmapFromString = 762;
  FUNCmapKeys = 763;
  FUNCmapPartialReverseSort = 764;
  FUNCmapPartialSort = 765;
  FUNCmapPopulateSeries = 766;
  FUNCmapReverseSort = 767;
  FUNCmapSort = 768;
  FUNCmapSubtract = 769;
  FUNCmapUpdate = 770;
  FUNCmapValues = 771;
  FUNCmatch = 772;
  FUNCmaterialize = 773;
  FUNCmax = 774;
  FUNCmax2 = 775;
  FUNCmaxIntersections = 776;
  FUNCmaxIntersectionsPosition = 777;
  FUNCmaxMap = 778;
  FUNCmaxMappedArrays = 779;
  FUNCmeanZTest = 780;
  FUNCmedian = 781;
  FUNCmedianBFloat16 = 782;
  FUNCmedianBFloat16Weighted = 783;
  FUNCmedianDD = 784;
  FUNCmedianDeterministic = 785;
  FUNCmedianExact = 786;
  FUNCmedianExactHigh = 787;
  FUNCmedianExactLow = 788;
  FUNCmedianExactWeighted = 789;
  FUNCmedianGK = 790;
  FUNCmedianInterpolatedWeighted = 791;
  FUNCmedianTDigest = 792;
  FUNCmedianTDigestWeighted = 793;
  FUNCmedianTiming = 794;
  FUNCmedianTimingWeighted = 795;
  FUNCmetroHash64 = 796;
  FUNCmid = 797;
  FUNCmin = 798;
  FUNCmin2 = 799;
  FUNCminMap = 800;
  FUNCminMappedArrays = 801;
  FUNCminSampleSizeContinous = 802;
  FUNCminSampleSizeContinuous = 803;
  FUNCminSampleSizeConversion = 804;
  FUNCminus = 805;
  FUNCmismatches = 806;
  FUNCmod = 807;
  FUNCmodulo = 808;
  FUNCmoduloLegacy = 809;
  FUNCmoduloOrZero = 810;
  FUNCmonthName = 811;
  FUNCmortonDecode = 812;
  FUNCmortonEncode = 813;
  FUNCmultiFuzzyMatchAllIndices = 814;
  FUNCmultiFuzzyMatchAny = 815;
  FUNCmultiFuzzyMatchAnyIndex = 816;
  FUNCmultiIf = 817;
  FUNCmultiMatchAllIndices = 818;
  FUNCmultiMatchAny = 819;
  FUNCmultiMatchAnyIndex = 820;
  FUNCmultiSearchAllPositions = 821;
  FUNCmultiSearchAllPositionsCaseInsensitive = 822;
  FUNCmultiSearchAllPositionsCaseInsensitiveUTF8 = 823;
  FUNCmultiSearchAllPositionsUTF8 = 824;
  FUNCmultiSearchAny = 825;
  FUNCmultiSearchAnyCaseInsensitive = 826;
  FUNCmultiSearchAnyCaseInsensitiveUTF8 = 827;
  FUNCmultiSearchAnyUTF8 = 828;
  FUNCmultiSearchFirstIndex = 829;
  FUNCmultiSearchFirstIndexCaseInsensitive = 830;
  FUNCmultiSearchFirstIndexCaseInsensitiveUTF8 = 831;
  FUNCmultiSearchFirstIndexUTF8 = 832;
  FUNCmultiSearchFirstPosition = 833;
  FUNCmultiSearchFirstPositionCaseInsensitive = 834;
  FUNCmultiSearchFirstPositionCaseInsensitiveUTF8 = 835;
  FUNCmultiSearchFirstPositionUTF8 = 836;
  FUNCmultiply = 837;
  FUNCmultiplyDecimal = 838;
  FUNCmurmurHash2_32 = 839;
  FUNCmurmurHash2_64 = 840;
  FUNCmurmurHash3_128 = 841;
  FUNCmurmurHash3_32 = 842;
  FUNCmurmurHash3_64 = 843;
  FUNCnegate = 844;
  FUNCneighbor = 845;
  FUNCnested = 846;
  FUNCnetloc = 847;
  FUNCngramDistance = 848;
  FUNCngramDistanceCaseInsensitive = 849;
  FUNCngramDistanceCaseInsensitiveUTF8 = 850;
  FUNCngramDistanceUTF8 = 851;
  FUNCngramMinHash = 852;
  FUNCngramMinHashArg = 853;
  FUNCngramMinHashArgCaseInsensitive = 854;
  FUNCngramMinHashArgCaseInsensitiveUTF8 = 855;
  FUNCngramMinHashArgUTF8 = 856;
  FUNCngramMinHashCaseInsensitive = 857;
  FUNCngramMinHashCaseInsensitiveUTF8 = 858;
  FUNCngramMinHashUTF8 = 859;
  FUNCngramSearch = 860;
  FUNCngramSearchCaseInsensitive = 861;
  FUNCngramSearchCaseInsensitiveUTF8 = 862;
  FUNCngramSearchUTF8 = 863;
  FUNCngramSimHash = 864;
  FUNCngramSimHashCaseInsensitive = 865;
  FUNCngramSimHashCaseInsensitiveUTF8 = 866;
  FUNCngramSimHashUTF8 = 867;
  FUNCngrams = 868;
  FUNCnonNegativeDerivative = 869;
  FUNCnormL1 = 870;
  FUNCnormL2 = 871;
  FUNCnormL2Squared = 872;
  FUNCnormLinf = 873;
  FUNCnormLp = 874;
  FUNCnormalizeL1 = 875;
  FUNCnormalizeL2 = 876;
  FUNCnormalizeLinf = 877;
  FUNCnormalizeLp = 878;
  FUNCnormalizeQuery = 879;
  FUNCnormalizeQueryKeepNames = 880;
  FUNCnormalizeUTF8NFC = 881;
  FUNCnormalizeUTF8NFD = 882;
  FUNCnormalizeUTF8NFKC = 883;
  FUNCnormalizeUTF8NFKD = 884;
  FUNCnormalizedQueryHash = 885;
  FUNCnormalizedQueryHashKeepNames = 886;
  FUNCnot = 887;
  FUNCnotEmpty = 888;
  FUNCnotEquals = 889;
  FUNCnotILike = 890;
  FUNCnotIn = 891;
  FUNCnotInIgnoreSet = 892;
  FUNCnotLike = 893;
  FUNCnotNullIn = 894;
  FUNCnotNullInIgnoreSet = 895;
  FUNCnothing = 896;
  FUNCnothingUInt64 = 897;
  FUNCnow = 898;
  FUNCnow64 = 899;
  FUNCnowInBlock = 900;
  FUNCnth_value = 901;
  FUNCntile = 902;
  FUNCnullIf = 903;
  FUNCnullIn = 904;
  FUNCnullInIgnoreSet = 905;
  FUNCor = 906;
  FUNCoverlay = 907;
  FUNCoverlayUTF8 = 908;
  FUNCparseDateTime = 909;
  FUNCparseDateTime32BestEffort = 910;
  FUNCparseDateTime32BestEffortOrNull = 911;
  FUNCparseDateTime32BestEffortOrZero = 912;
  FUNCparseDateTime64BestEffort = 913;
  FUNCparseDateTime64BestEffortOrNull = 914;
  FUNCparseDateTime64BestEffortOrZero = 915;
  FUNCparseDateTime64BestEffortUS = 916;
  FUNCparseDateTime64BestEffortUSOrNull = 917;
  FUNCparseDateTime64BestEffortUSOrZero = 918;
  FUNCparseDateTimeBestEffort = 919;
  FUNCparseDateTimeBestEffortOrNull = 920;
  FUNCparseDateTimeBestEffortOrZero = 921;
  FUNCparseDateTimeBestEffortUS = 922;
  FUNCparseDateTimeBestEffortUSOrNull = 923;
  FUNCparseDateTimeBestEffortUSOrZero = 924;
  FUNCparseDateTimeInJodaSyntax = 925;
  FUNCparseDateTimeInJodaSyntaxOrNull = 926;
  FUNCparseDateTimeInJodaSyntaxOrZero = 927;
  FUNCparseDateTimeOrNull = 928;
  FUNCparseDateTimeOrZero = 929;
  FUNCparseReadableSize = 930;
  FUNCparseReadableSizeOrZero = 931;
  FUNCparseTimeDelta = 932;
  FUNCpartitionID = 933;
  FUNCpath = 934;
  FUNCpathFull = 935;
  FUNCpercentRank = 936;
  FUNCpercent_rank = 937;
  FUNCpi = 938;
  FUNCplus = 939;
  FUNCpmod = 940;
  FUNCpointInEllipses = 941;
  FUNCpointInPolygon = 942;
  FUNCpolygonAreaCartesian = 943;
  FUNCpolygonAreaSpherical = 944;
  FUNCpolygonConvexHullCartesian = 945;
  FUNCpolygonPerimeterCartesian = 946;
  FUNCpolygonPerimeterSpherical = 947;
  FUNCpolygonsDistanceCartesian = 948;
  FUNCpolygonsDistanceSpherical = 949;
  FUNCpolygonsEqualsCartesian = 950;
  FUNCpolygonsIntersectionCartesian = 951;
  FUNCpolygonsIntersectionSpherical = 952;
  FUNCpolygonsSymDifferenceCartesian = 953;
  FUNCpolygonsSymDifferenceSpherical = 954;
  FUNCpolygonsUnionCartesian = 955;
  FUNCpolygonsUnionSpherical = 956;
  FUNCpolygonsWithinCartesian = 957;
  FUNCpolygonsWithinSpherical = 958;
  FUNCport = 959;
  FUNCportRFC = 960;
  FUNCposition = 961;
  FUNCpositionCaseInsensitive = 962;
  FUNCpositionCaseInsensitiveUTF8 = 963;
  FUNCpositionUTF8 = 964;
  FUNCpositiveModulo = 965;
  FUNCpositive_modulo = 966;
  FUNCpow = 967;
  FUNCpower = 968;
  FUNCprintf = 969;
  FUNCproportionsZTest = 970;
  FUNCprotocol = 971;
  FUNCpunycodeDecode = 972;
  FUNCpunycodeEncode = 973;
  FUNCquantile = 974;
  FUNCquantileBFloat16 = 975;
  FUNCquantileBFloat16Weighted = 976;
  FUNCquantileDD = 977;
  FUNCquantileDeterministic = 978;
  FUNCquantileExact = 979;
  FUNCquantileExactExclusive = 980;
  FUNCquantileExactHigh = 981;
  FUNCquantileExactInclusive = 982;
  FUNCquantileExactLow = 983;
  FUNCquantileExactWeighted = 984;
  FUNCquantileGK = 985;
  FUNCquantileInterpolatedWeighted = 986;
  FUNCquantileTDigest = 987;
  FUNCquantileTDigestWeighted = 988;
  FUNCquantileTiming = 989;
  FUNCquantileTimingWeighted = 990;
  FUNCquantiles = 991;
  FUNCquantilesBFloat16 = 992;
  FUNCquantilesBFloat16Weighted = 993;
  FUNCquantilesDD = 994;
  FUNCquantilesDeterministic = 995;
  FUNCquantilesExact = 996;
  FUNCquantilesExactExclusive = 997;
  FUNCquantilesExactHigh = 998;
  FUNCquantilesExactInclusive = 999;
  FUNCquantilesExactLow = 1000;
  FUNCquantilesExactWeighted = 1001;
  FUNCquantilesGK = 1002;
  FUNCquantilesInterpolatedWeighted = 1003;
  FUNCquantilesTDigest = 1004;
  FUNCquantilesTDigestWeighted = 1005;
  FUNCquantilesTiming = 1006;
  FUNCquantilesTimingWeighted = 1007;
  FUNCqueryID = 1008;
  FUNCqueryString = 1009;
  FUNCqueryStringAndFragment = 1010;
  FUNCquery_id = 1011;
  FUNCradians = 1012;
  FUNCrand = 1013;
  FUNCrand32 = 1014;
  FUNCrand64 = 1015;
  FUNCrandBernoulli = 1016;
  FUNCrandBinomial = 1017;
  FUNCrandCanonical = 1018;
  FUNCrandChiSquared = 1019;
  FUNCrandConstant = 1020;
  FUNCrandExponential = 1021;
  FUNCrandFisherF = 1022;
  FUNCrandLogNormal = 1023;
  FUNCrandNegativeBinomial = 1024;
  FUNCrandNormal = 1025;
  FUNCrandPoisson = 1026;
  FUNCrandStudentT = 1027;
  FUNCrandUniform = 1028;
  FUNCrandomFixedString = 1029;
  FUNCrandomPrintableASCII = 1030;
  FUNCrandomString = 1031;
  FUNCrandomStringUTF8 = 1032;
  FUNCrange = 1033;
  FUNCrank = 1034;
  FUNCrankCorr = 1035;
  FUNCreadWKTLineString = 1036;
  FUNCreadWKTMultiLineString = 1037;
  FUNCreadWKTMultiPolygon = 1038;
  FUNCreadWKTPoint = 1039;
  FUNCreadWKTPolygon = 1040;
  FUNCreadWKTRing = 1041;
  FUNCregexpExtract = 1042;
  FUNCregexpQuoteMeta = 1043;
  FUNCregionHierarchy = 1044;
  FUNCregionIn = 1045;
  FUNCregionToArea = 1046;
  FUNCregionToCity = 1047;
  FUNCregionToContinent = 1048;
  FUNCregionToCountry = 1049;
  FUNCregionToDistrict = 1050;
  FUNCregionToName = 1051;
  FUNCregionToPopulation = 1052;
  FUNCregionToTopContinent = 1053;
  FUNCreinterpret = 1054;
  FUNCreinterpretAsDate = 1055;
  FUNCreinterpretAsDateTime = 1056;
  FUNCreinterpretAsFixedString = 1057;
  FUNCreinterpretAsFloat32 = 1058;
  FUNCreinterpretAsFloat64 = 1059;
  FUNCreinterpretAsInt128 = 1060;
  FUNCreinterpretAsInt16 = 1061;
  FUNCreinterpretAsInt256 = 1062;
  FUNCreinterpretAsInt32 = 1063;
  FUNCreinterpretAsInt64 = 1064;
  FUNCreinterpretAsInt8 = 1065;
  FUNCreinterpretAsString = 1066;
  FUNCreinterpretAsUInt128 = 1067;
  FUNCreinterpretAsUInt16 = 1068;
  FUNCreinterpretAsUInt256 = 1069;
  FUNCreinterpretAsUInt32 = 1070;
  FUNCreinterpretAsUInt64 = 1071;
  FUNCreinterpretAsUInt8 = 1072;
  FUNCreinterpretAsUUID = 1073;
  FUNCrepeat = 1074;
  FUNCreplace = 1075;
  FUNCreplaceAll = 1076;
  FUNCreplaceOne = 1077;
  FUNCreplaceRegexpAll = 1078;
  FUNCreplaceRegexpOne = 1079;
  FUNCreplicate = 1080;
  FUNCretention = 1081;
  FUNCreverse = 1082;
  FUNCreverseUTF8 = 1083;
  FUNCrevision = 1084;
  FUNCright = 1085;
  FUNCrightPad = 1086;
  FUNCrightPadUTF8 = 1087;
  FUNCrightUTF8 = 1088;
  FUNCripeMD160 = 1089;
  FUNCround = 1090;
  FUNCroundAge = 1091;
  FUNCroundBankers = 1092;
  FUNCroundDown = 1093;
  FUNCroundDuration = 1094;
  FUNCroundToExp2 = 1095;
  FUNCrowNumberInAllBlocks = 1096;
  FUNCrowNumberInBlock = 1097;
  FUNCrow_number = 1098;
  FUNCrpad = 1099;
  FUNCrtrim = 1100;
  FUNCrunningAccumulate = 1101;
  FUNCrunningConcurrency = 1102;
  FUNCrunningDifference = 1103;
  FUNCrunningDifferenceStartingWithFirstValue = 1104;
  FUNCs2CapContains = 1105;
  FUNCs2CapUnion = 1106;
  FUNCs2CellsIntersect = 1107;
  FUNCs2GetNeighbors = 1108;
  FUNCs2RectAdd = 1109;
  FUNCs2RectContains = 1110;
  FUNCs2RectIntersection = 1111;
  FUNCs2RectUnion = 1112;
  FUNCs2ToGeo = 1113;
  FUNCscalarProduct = 1114;
  FUNCsequenceCount = 1115;
  FUNCsequenceMatch = 1116;
  FUNCsequenceNextNode = 1117;
  FUNCseriesDecomposeSTL = 1118;
  FUNCseriesOutliersDetectTukey = 1119;
  FUNCseriesPeriodDetectFFT = 1120;
  FUNCserverTimeZone = 1121;
  FUNCserverUUID = 1122;
  FUNCshardCount = 1123;
  FUNCshardNum = 1124;
  FUNCshowCertificate = 1125;
  FUNCsigmoid = 1126;
  FUNCsign = 1127;
  FUNCsimpleJSONExtractBool = 1128;
  FUNCsimpleJSONExtractFloat = 1129;
  FUNCsimpleJSONExtractInt = 1130;
  FUNCsimpleJSONExtractRaw = 1131;
  FUNCsimpleJSONExtractString = 1132;
  FUNCsimpleJSONExtractUInt = 1133;
  FUNCsimpleJSONHas = 1134;
  FUNCsimpleLinearRegression = 1135;
  FUNCsin = 1136;
  FUNCsingleValueOrNull = 1137;
  FUNCsinh = 1138;
  FUNCsipHash128 = 1139;
  FUNCsipHash128Keyed = 1140;
  FUNCsipHash128Reference = 1141;
  FUNCsipHash128ReferenceKeyed = 1142;
  FUNCsipHash64 = 1143;
  FUNCsipHash64Keyed = 1144;
  FUNCskewPop = 1145;
  FUNCskewSamp = 1146;
  FUNCsleep = 1147;
  FUNCsleepEachRow = 1148;
  FUNCsnowflakeIDToDateTime = 1149;
  FUNCsnowflakeIDToDateTime64 = 1150;
  FUNCsnowflakeToDateTime = 1151;
  FUNCsnowflakeToDateTime64 = 1152;
  FUNCsoundex = 1153;
  FUNCspace = 1154;
  FUNCsparkBar = 1155;
  FUNCsplitByAlpha = 1156;
  FUNCsplitByChar = 1157;
  FUNCsplitByNonAlpha = 1158;
  FUNCsplitByRegexp = 1159;
  FUNCsplitByString = 1160;
  FUNCsplitByWhitespace = 1161;
  FUNCsqid = 1162;
  FUNCsqidDecode = 1163;
  FUNCsqidEncode = 1164;
  FUNCsqrt = 1165;
  FUNCstartsWith = 1166;
  FUNCstartsWithUTF8 = 1167;
  FUNCstddevPop = 1168;
  FUNCstddevPopStable = 1169;
  FUNCstddevSamp = 1170;
  FUNCstddevSampStable = 1171;
  FUNCstem = 1172;
  FUNCstochasticLinearRegression = 1173;
  FUNCstochasticLogisticRegression = 1174;
  FUNCstr_to_date = 1175;
  FUNCstringJaccardIndex = 1176;
  FUNCstringJaccardIndexUTF8 = 1177;
  FUNCstringToH3 = 1178;
  FUNCstructureToCapnProtoSchema = 1179;
  FUNCstructureToProtobufSchema = 1180;
  FUNCstudentTTest = 1181;
  FUNCsubBitmap = 1182;
  FUNCsubDate = 1183;
  FUNCsubstr = 1184;
  FUNCsubstring = 1185;
  FUNCsubstringIndex = 1186;
  FUNCsubstringIndexUTF8 = 1187;
  FUNCsubstringUTF8 = 1188;
  FUNCsubtractDays = 1189;
  FUNCsubtractHours = 1190;
  FUNCsubtractInterval = 1191;
  FUNCsubtractMicroseconds = 1192;
  FUNCsubtractMilliseconds = 1193;
  FUNCsubtractMinutes = 1194;
  FUNCsubtractMonths = 1195;
  FUNCsubtractNanoseconds = 1196;
  FUNCsubtractQuarters = 1197;
  FUNCsubtractSeconds = 1198;
  FUNCsubtractTupleOfIntervals = 1199;
  FUNCsubtractWeeks = 1200;
  FUNCsubtractYears = 1201;
  FUNCsum = 1202;
  FUNCsumCount = 1203;
  FUNCsumKahan = 1204;
  FUNCsumMap = 1205;
  FUNCsumMapFiltered = 1206;
  FUNCsumMapFilteredWithOverflow = 1207;
  FUNCsumMapWithOverflow = 1208;
  FUNCsumMappedArrays = 1209;
  FUNCsumWithOverflow = 1210;
  FUNCsvg = 1211;
  FUNCsynonyms = 1212;
  FUNCtan = 1213;
  FUNCtanh = 1214;
  FUNCtcpPort = 1215;
  FUNCtgamma = 1216;
  FUNCtheilsU = 1217;
  FUNCtid = 1218;
  FUNCtimeDiff = 1219;
  FUNCtimeSlot = 1220;
  FUNCtimeSlots = 1221;
  FUNCtimeZone = 1222;
  FUNCtimeZoneOf = 1223;
  FUNCtimeZoneOffset = 1224;
  FUNCtimestamp = 1225;
  FUNCtimestampDiff = 1226;
  FUNCtimestamp_add = 1227;
  FUNCtimestamp_diff = 1228;
  FUNCtimestamp_sub = 1229;
  FUNCtoBool = 1230;
  FUNCtoColumnTypeName = 1231;
  FUNCtoDate = 1232;
  FUNCtoDate32 = 1233;
  FUNCtoDate32OrDefault = 1234;
  FUNCtoDate32OrNull = 1235;
  FUNCtoDate32OrZero = 1236;
  FUNCtoDateOrDefault = 1237;
  FUNCtoDateOrNull = 1238;
  FUNCtoDateOrZero = 1239;
  FUNCtoDateTime = 1240;
  FUNCtoDateTime32 = 1241;
  FUNCtoDateTime64 = 1242;
  FUNCtoDateTime64OrDefault = 1243;
  FUNCtoDateTime64OrNull = 1244;
  FUNCtoDateTime64OrZero = 1245;
  FUNCtoDateTimeOrDefault = 1246;
  FUNCtoDateTimeOrNull = 1247;
  FUNCtoDateTimeOrZero = 1248;
  FUNCtoDayOfMonth = 1249;
  FUNCtoDayOfWeek = 1250;
  FUNCtoDayOfYear = 1251;
  FUNCtoDaysSinceYearZero = 1252;
  FUNCtoDecimal128 = 1253;
  FUNCtoDecimal128OrDefault = 1254;
  FUNCtoDecimal128OrNull = 1255;
  FUNCtoDecimal128OrZero = 1256;
  FUNCtoDecimal256 = 1257;
  FUNCtoDecimal256OrDefault = 1258;
  FUNCtoDecimal256OrNull = 1259;
  FUNCtoDecimal256OrZero = 1260;
  FUNCtoDecimal32 = 1261;
  FUNCtoDecimal32OrDefault = 1262;
  FUNCtoDecimal32OrNull = 1263;
  FUNCtoDecimal32OrZero = 1264;
  FUNCtoDecimal64 = 1265;
  FUNCtoDecimal64OrDefault = 1266;
  FUNCtoDecimal64OrNull = 1267;
  FUNCtoDecimal64OrZero = 1268;
  FUNCtoDecimalString = 1269;
  FUNCtoFixedString = 1270;
  FUNCtoFloat32 = 1271;
  FUNCtoFloat32OrDefault = 1272;
  FUNCtoFloat32OrNull = 1273;
  FUNCtoFloat32OrZero = 1274;
  FUNCtoFloat64 = 1275;
  FUNCtoFloat64OrDefault = 1276;
  FUNCtoFloat64OrNull = 1277;
  FUNCtoFloat64OrZero = 1278;
  FUNCtoHour = 1279;
  FUNCtoIPv4 = 1280;
  FUNCtoIPv4OrZero = 1281;
  FUNCtoIPv6 = 1282;
  FUNCtoIPv6OrZero = 1283;
  FUNCtoISOWeek = 1284;
  FUNCtoISOYear = 1285;
  FUNCtoInt128 = 1286;
  FUNCtoInt128OrDefault = 1287;
  FUNCtoInt128OrNull = 1288;
  FUNCtoInt128OrZero = 1289;
  FUNCtoInt16 = 1290;
  FUNCtoInt16OrDefault = 1291;
  FUNCtoInt16OrNull = 1292;
  FUNCtoInt16OrZero = 1293;
  FUNCtoInt256 = 1294;
  FUNCtoInt256OrDefault = 1295;
  FUNCtoInt256OrNull = 1296;
  FUNCtoInt256OrZero = 1297;
  FUNCtoInt32 = 1298;
  FUNCtoInt32OrDefault = 1299;
  FUNCtoInt32OrNull = 1300;
  FUNCtoInt32OrZero = 1301;
  FUNCtoInt64 = 1302;
  FUNCtoInt64OrDefault = 1303;
  FUNCtoInt64OrNull = 1304;
  FUNCtoInt64OrZero = 1305;
  FUNCtoInt8 = 1306;
  FUNCtoInt8OrDefault = 1307;
  FUNCtoInt8OrNull = 1308;
  FUNCtoInt8OrZero = 1309;
  FUNCtoIntervalDay = 1310;
  FUNCtoIntervalHour = 1311;
  FUNCtoIntervalMicrosecond = 1312;
  FUNCtoIntervalMillisecond = 1313;
  FUNCtoIntervalMinute = 1314;
  FUNCtoIntervalMonth = 1315;
  FUNCtoIntervalNanosecond = 1316;
  FUNCtoIntervalQuarter = 1317;
  FUNCtoIntervalSecond = 1318;
  FUNCtoIntervalWeek = 1319;
  FUNCtoIntervalYear = 1320;
  FUNCtoJSONString = 1321;
  FUNCtoLastDayOfMonth = 1322;
  FUNCtoLastDayOfWeek = 1323;
  FUNCtoLowCardinality = 1324;
  FUNCtoMillisecond = 1325;
  FUNCtoMinute = 1326;
  FUNCtoModifiedJulianDay = 1327;
  FUNCtoModifiedJulianDayOrNull = 1328;
  FUNCtoMonday = 1329;
  FUNCtoMonth = 1330;
  FUNCtoNullable = 1331;
  FUNCtoQuarter = 1332;
  FUNCtoRelativeDayNum = 1333;
  FUNCtoRelativeHourNum = 1334;
  FUNCtoRelativeMinuteNum = 1335;
  FUNCtoRelativeMonthNum = 1336;
  FUNCtoRelativeQuarterNum = 1337;
  FUNCtoRelativeSecondNum = 1338;
  FUNCtoRelativeWeekNum = 1339;
  FUNCtoRelativeYearNum = 1340;
  FUNCtoSecond = 1341;
  FUNCtoStartOfDay = 1342;
  FUNCtoStartOfFifteenMinutes = 1343;
  FUNCtoStartOfFiveMinute = 1344;
  FUNCtoStartOfFiveMinutes = 1345;
  FUNCtoStartOfHour = 1346;
  FUNCtoStartOfISOYear = 1347;
  FUNCtoStartOfInterval = 1348;
  FUNCtoStartOfMicrosecond = 1349;
  FUNCtoStartOfMillisecond = 1350;
  FUNCtoStartOfMinute = 1351;
  FUNCtoStartOfMonth = 1352;
  FUNCtoStartOfNanosecond = 1353;
  FUNCtoStartOfQuarter = 1354;
  FUNCtoStartOfSecond = 1355;
  FUNCtoStartOfTenMinutes = 1356;
  FUNCtoStartOfWeek = 1357;
  FUNCtoStartOfYear = 1358;
  FUNCtoString = 1359;
  FUNCtoStringCutToZero = 1360;
  FUNCtoTime = 1361;
  FUNCtoTimeZone = 1362;
  FUNCtoTypeName = 1363;
  FUNCtoUInt128 = 1364;
  FUNCtoUInt128OrDefault = 1365;
  FUNCtoUInt128OrNull = 1366;
  FUNCtoUInt128OrZero = 1367;
  FUNCtoUInt16 = 1368;
  FUNCtoUInt16OrDefault = 1369;
  FUNCtoUInt16OrNull = 1370;
  FUNCtoUInt16OrZero = 1371;
  FUNCtoUInt256 = 1372;
  FUNCtoUInt256OrDefault = 1373;
  FUNCtoUInt256OrNull = 1374;
  FUNCtoUInt256OrZero = 1375;
  FUNCtoUInt32 = 1376;
  FUNCtoUInt32OrDefault = 1377;
  FUNCtoUInt32OrNull = 1378;
  FUNCtoUInt32OrZero = 1379;
  FUNCtoUInt64 = 1380;
  FUNCtoUInt64OrDefault = 1381;
  FUNCtoUInt64OrNull = 1382;
  FUNCtoUInt64OrZero = 1383;
  FUNCtoUInt8 = 1384;
  FUNCtoUInt8OrDefault = 1385;
  FUNCtoUInt8OrNull = 1386;
  FUNCtoUInt8OrZero = 1387;
  FUNCtoUTCTimestamp = 1388;
  FUNCtoUUID = 1389;
  FUNCtoUUIDOrDefault = 1390;
  FUNCtoUUIDOrNull = 1391;
  FUNCtoUUIDOrZero = 1392;
  FUNCtoUnixTimestamp = 1393;
  FUNCtoUnixTimestamp64Micro = 1394;
  FUNCtoUnixTimestamp64Milli = 1395;
  FUNCtoUnixTimestamp64Nano = 1396;
  FUNCtoValidUTF8 = 1397;
  FUNCtoWeek = 1398;
  FUNCtoYYYYMM = 1399;
  FUNCtoYYYYMMDD = 1400;
  FUNCtoYYYYMMDDhhmmss = 1401;
  FUNCtoYear = 1402;
  FUNCtoYearWeek = 1403;
  FUNCto_utc_timestamp = 1404;
  FUNCtoday = 1405;
  FUNCtokens = 1406;
  FUNCtopK = 1407;
  FUNCtopKWeighted = 1408;
  FUNCtopLevelDomain = 1409;
  FUNCtopLevelDomainRFC = 1410;
  FUNCtransactionID = 1411;
  FUNCtransactionLatestSnapshot = 1412;
  FUNCtransactionOldestSnapshot = 1413;
  FUNCtransform = 1414;
  FUNCtranslate = 1415;
  FUNCtranslateUTF8 = 1416;
  FUNCtrim = 1417;
  FUNCtrimBoth = 1418;
  FUNCtrimLeft = 1419;
  FUNCtrimRight = 1420;
  FUNCtrunc = 1421;
  FUNCtruncate = 1422;
  FUNCtryBase58Decode = 1423;
  FUNCtryBase64Decode = 1424;
  FUNCtryBase64URLDecode = 1425;
  FUNCtryDecrypt = 1426;
  FUNCtryIdnaEncode = 1427;
  FUNCtryPunycodeDecode = 1428;
  FUNCtumble = 1429;
  FUNCtumbleEnd = 1430;
  FUNCtumbleStart = 1431;
  FUNCtuple = 1432;
  FUNCtupleConcat = 1433;
  FUNCtupleDivide = 1434;
  FUNCtupleDivideByNumber = 1435;
  FUNCtupleElement = 1436;
  FUNCtupleHammingDistance = 1437;
  FUNCtupleIntDiv = 1438;
  FUNCtupleIntDivByNumber = 1439;
  FUNCtupleIntDivOrZero = 1440;
  FUNCtupleIntDivOrZeroByNumber = 1441;
  FUNCtupleMinus = 1442;
  FUNCtupleModulo = 1443;
  FUNCtupleModuloByNumber = 1444;
  FUNCtupleMultiply = 1445;
  FUNCtupleMultiplyByNumber = 1446;
  FUNCtupleNames = 1447;
  FUNCtupleNegate = 1448;
  FUNCtuplePlus = 1449;
  FUNCtupleToNameValuePairs = 1450;
  FUNCucase = 1451;
  FUNCunbin = 1452;
  FUNCunhex = 1453;
  FUNCuniq = 1454;
  FUNCuniqCombined = 1455;
  FUNCuniqCombined64 = 1456;
  FUNCuniqExact = 1457;
  FUNCuniqHLL12 = 1458;
  FUNCuniqTheta = 1459;
  FUNCuniqThetaIntersect = 1460;
  FUNCuniqThetaNot = 1461;
  FUNCuniqThetaUnion = 1462;
  FUNCuniqUpTo = 1463;
  FUNCuntuple = 1464;
  FUNCupper = 1465;
  FUNCupperUTF8 = 1466;
  FUNCuptime = 1467;
  FUNCuser = 1468;
  FUNCvalidateNestedArraySizes = 1469;
  FUNCvarPop = 1470;
  FUNCvarPopStable = 1471;
  FUNCvarSamp = 1472;
  FUNCvarSampStable = 1473;
  FUNCvariantElement = 1474;
  FUNCvariantType = 1475;
  FUNCvectorDifference = 1476;
  FUNCvectorSum = 1477;
  FUNCversion = 1478;
  FUNCvisibleWidth = 1479;
  FUNCvisitParamExtractBool = 1480;
  FUNCvisitParamExtractFloat = 1481;
  FUNCvisitParamExtractInt = 1482;
  FUNCvisitParamExtractRaw = 1483;
  FUNCvisitParamExtractString = 1484;
  FUNCvisitParamExtractUInt = 1485;
  FUNCvisitParamHas = 1486;
  FUNCweek = 1487;
  FUNCwelchTTest = 1488;
  FUNCwidthBucket = 1489;
  FUNCwidth_bucket = 1490;
  FUNCwindowFunnel = 1491;
  FUNCwindowID = 1492;
  FUNCwkt = 1493;
  FUNCwordShingleMinHash = 1494;
  FUNCwordShingleMinHashArg = 1495;
  FUNCwordShingleMinHashArgCaseInsensitive = 1496;
  FUNCwordShingleMinHashArgCaseInsensitiveUTF8 = 1497;
  FUNCwordShingleMinHashArgUTF8 = 1498;
  FUNCwordShingleMinHashCaseInsensitive = 1499;
  FUNCwordShingleMinHashCaseInsensitiveUTF8 = 1500;
  FUNCwordShingleMinHashUTF8 = 1501;
  FUNCwordShingleSimHash = 1502;
  FUNCwordShingleSimHashCaseInsensitive = 1503;
  FUNCwordShingleSimHashCaseInsensitiveUTF8 = 1504;
  FUNCwordShingleSimHashUTF8 = 1505;
  FUNCwyHash64 = 1506;
  FUNCxor = 1507;
  FUNCxxHash32 = 1508;
  FUNCxxHash64 = 1509;
  FUNCxxh3 = 1510;
  FUNCyandexConsistentHash = 1511;
  FUNCyearweek = 1512;
  FUNCyesterday = 1513;
  FUNCzookeeperSessionUptime = 1514;
}

message Table {
  required string table = 1;
}

message Column {
  required string column = 1;
}

message Index {
  required string index = 1;
}

message Projection {
  required string projection = 1;
}

message Constraint {
  required string constraint = 1;
}

enum SpecialVal {
  VAL_NULL = 1;
  VAL_TRUE = 2;
  VAL_FALSE = 3;
  VAL_ZERO = 4;
  VAL_ONE = 5;
  VAL_MINUS_ONE = 6;
  VAL_EMPTY_STRING = 7;
  VAL_EMPTY_ARRAY = 8;
  VAL_EMPTY_TUPLE = 9;
  VAL_MINUS_ZERO_FP = 10;
  VAL_PLUS_ZERO_FP = 11;
  VAL_ZERO_FP = 12;
  VAL_INF = 13;
  VAL_PLUS_INF = 14;
  VAL_MINUS_INF = 15;
  VAL_NAN = 16;
  VAL_HAPPY = 17;
  VAL_TEN_HAPPY = 18;
  MIN_INT32 = 19;
  MAX_INT32 = 20;
  MIN_INT64 = 21;
  MAX_INT64 = 22;
  MAX_UINT32 = 23;
  MAX_UINT64 = 24;
  VAL_NULL_CHAR = 25;
  VAL_DEFAULT = 26;
  VAL_STAR = 27;
}

message NumericLiteral {
  required bool negative = 1;
  repeated uint32 digits = 2;
  required bool decimal_point = 3;
  repeated uint32 dec_digits = 4;
  repeated uint32 exp_digits = 5;
  required bool negative_exp = 6;
}

enum Integers {
  UInt8 = 1;
  UInt16 = 2;
  UInt32 = 3;
  UInt64 = 4;
  UInt128 = 5;
  UInt256 = 6;
  Int8 = 7;
  Int16 = 8;
  Int32 = 9;
  Int64 = 10;
  Int128 = 11;
  Int256 = 12;
  Int = 13;
}

enum FloatingPoints {
  Float32 = 1;
  Float64 = 2;
}

enum Dates {
  Date = 1;
  Date32 = 2;
  DateTime = 3;
  DateTime64 = 4;
}

message IntLiteral {
  oneof int_oneof {
    uint64 int_lit = 1;
    int64 uint_lit = 2;
  }
  optional Integers integers = 3;
}

message LiteralValue {
  oneof lit_val_oneof {
    IntLiteral int_lit = 1;
    NumericLiteral numeric_lit = 2;
    bytes string_lit = 3;
    bytes hex_string = 4;
    bytes heredoc = 5;
    int64 json_value = 6;
    int64 json_string = 7;
    SpecialVal special_val = 8;
    string no_quote_str = 9;
  }
}

message JSONColumn {
  required Column col = 1;
  oneof jcol_oneof {
    bool json_col = 2;
    uint32 json_array = 3;
  }
}

message JSONColumns {
  required JSONColumn jcol = 1;
  repeated JSONColumn other_jcols = 2;
  oneof jcol_oneof {
    TypeName json_cast = 3;
    TypeName json_reinterpret = 4;
  }
}

message FieldAccess {
  oneof nested_oneof {
    int32 array_index = 1;
    Expr array_expr = 2;
    Column array_key = 3;
    uint32 tuple_index = 4;
  }
}

message ExprColumn {
  required Column col = 1;
  optional JSONColumns subcols = 2;
  optional TypeName dynamic_subtype = 3;
  optional bool null = 4;
}

message ExprSchemaTableColumn {
  //optional Schema schema = 1;
  optional Table table = 1;
  required ExprColumn col = 2;
}

enum UnaryOperator {
  UNOP_MINUS = 1;
  UNOP_PLUS = 2;
  UNOP_NOT = 3;
}

message UnaryExpr {
  required UnaryOperator unary_op = 1;
  required Expr expr = 2;
}

enum BinaryOperator {
  BINOP_LE = 1;
  BINOP_LEQ = 2;
  BINOP_GR = 3;
  BINOP_GREQ = 4;
  BINOP_EQ = 5;
  BINOP_EQEQ = 6;
  BINOP_NOTEQ = 7;
  BINOP_LEGR = 8;
  BINOP_AND = 9;
  BINOP_OR = 10;
  BINOP_CONCAT = 11;  // double pipe
  BINOP_STAR = 12;
  BINOP_SLASH = 13;
  BINOP_PERCENT = 14;
  BINOP_PLUS = 15;
  BINOP_MINUS = 16;
}

message BinaryExpr {
  required Expr lhs = 1;
  required BinaryOperator op = 2;
  required Expr rhs = 3;
}

message ParenthesesExpr {
  required ExprColAlias expr = 1;
  repeated ExprColAlias other_exprs = 2;
}

message CastExpr {
  required Expr expr = 1;
  required TypeName type_name = 2;
}

message ExprBetween {
  required bool not = 1;
  required Expr expr1 = 2;
  required Expr expr2 = 3;
  required Expr expr3 = 4;
}

message ExprList {
  required Expr expr = 1;
  repeated Expr extra_exprs = 2;
}

message ExprIn {
  required ExprList expr = 1;
  required bool global = 2;
  required bool not = 3;
  oneof exprin_oneof {
    ExprList exprs = 4;
    Select sel = 5;
  }
}

message ExprAny {
  required Expr expr = 1;
  required BinaryOperator op = 2;
  required bool anyall = 3;
  required Select sel = 4;
}

message ExprNullTests {
  required Expr expr = 1;
  required bool not = 2;
}

message ExprCase {
  optional Expr expr = 1;
  required ExprWhenThen when_then = 2;
  repeated ExprWhenThen extra_when_thens = 3;
  optional Expr else_expr = 4;
}

message ExprWhenThen {
  required Expr when_expr = 1;
  required Expr then_expr = 2;
}

message ExprExists {
  required bool not = 1;
  required Select select = 3;
}

message ExprLike {
  required Expr expr1 = 5;
  required bool not = 1;
  enum PossibleKeywords {
    LIKE = 1;
    ILIKE = 2;
  }
  required PossibleKeywords keyword = 2;
  required Expr expr2 = 3;
}

message CondExpr {
  required Expr expr1 = 1;
  required Expr expr2 = 2;
  required Expr expr3 = 3;
}

message ArraySequence {
  repeated Expr values = 1;
}

message TupleSequence {
  repeated ExprList values = 1;
}

message ColumnList {
  required Column col = 1;
  repeated Column other_cols = 2;
}

message LambdaExpr {
  required ColumnList args = 1;
  required Expr expr = 2;
}

message SQLFuncArg {
  oneof sqlfunc_arg_oneof {
    LambdaExpr lambda = 1;
    Expr expr = 2;
  }
}

enum FuncNulls {
  NRESPECT = 1;
  NIGNORE = 2;
}

message SQLFuncCall {
  enum AggregateCombinator {
    If = 1;
    Array = 2;
    Map = 3;
    SimpleState = 4;
    State = 5;
    Merge = 6;
    MergeState = 7;
    ForEach = 8;
    Distinct = 9;
    OrDefault = 10;
    OrNull = 11;
    ArgMin = 12;
    ArgMax = 13;
  }
  required SQLFunc func = 1;
  repeated AggregateCombinator combinators = 2;
  optional bool distinct = 3;
  repeated Expr params = 4;
  repeated SQLFuncArg args = 5;
  optional FuncNulls fnulls = 6;
}

message Window {
  required uint32 window = 1;
}

message FrameSpecSubLeftExpr {
  enum Which {
    CURRENT_ROW = 1;
    UNBOUNDED_PRECEDING = 2;
    PRECEDING = 3;
    FOLLOWING = 4;
  }
  required Which which = 1;
  optional Expr expr = 2;
}

message FrameSpecSubRightExpr {
  enum Which {
    CURRENT_ROW = 1;
    UNBOUNDED_FOLLOWING = 2;
    PRECEDING = 3;
    FOLLOWING = 4;
  }
  required Which which = 1;
  optional Expr expr = 2;
}

message ExprFrameSpec {
  enum RangeRows {
    RANGE = 0;
    ROWS = 1;
  }
  required RangeRows range_rows = 1;
  required FrameSpecSubLeftExpr left_expr = 2;
  optional FrameSpecSubRightExpr right_expr = 3;
}

message ExprOrderingTerm {
  enum AscDesc {
    ASC = 1;
    DESC = 2;
  }
  required Expr expr = 1;
  optional AscDesc asc_desc = 2;
  optional bool with_fill = 3;
}

message OrderByStatement {
  required ExprOrderingTerm ord_term = 1;
  repeated ExprOrderingTerm extra_ord_terms = 2;
}

message WindowDefn {
  repeated Expr partition_exprs = 1;
  optional OrderByStatement order_by = 2;
  optional ExprFrameSpec frame_spec = 3;
}

enum WindowFuncs {
  WINdense_rank = 1;
  WINfirst_value = 2;
  WINlagInFrame = 3;
  WINlast_value = 4;
  WINleadInFrame = 5;
  WINnth_value = 6;
  WINntile = 7;
  WINpercent_rank = 8;
  WINrank = 9;
  WINrow_number = 10;
}

message SQLWindowCall {
  required WindowFuncs func = 1;
  repeated Expr args = 2;
  optional FuncNulls fnulls = 3;
}

message WindowFuncCall {
  oneof window_fn_oneof {
    SQLWindowCall win_func = 1;
    SQLFuncCall agg_func = 2;
  }
  oneof window_over_oneof {
    WindowDefn win_defn = 3;
    Window win_name = 4;
  }
}

message IntervalExpr {
  enum Interval {
    NANOSECOND = 1;
    MICROSECOND = 2;
    MILLISECOND = 3;
    SECOND = 4;
    MINUTE = 5;
    HOUR = 6;
    DAY = 7;
    WEEK = 8;
    MONTH = 9;
    QUARTER = 10;
    YEAR = 11;
  }
  required Interval interval = 1;
  required Expr expr = 2;
}

// Separate this out to inflate the probability of having a literal value
message ComplicatedExpr {
  oneof complicated_expr_oneof {
    ExprSchemaTableColumn expr_stc = 1;
    UnaryExpr unary_expr = 2;
    BinaryExpr binary_expr = 3;
    ParenthesesExpr par_expr = 4;
    CastExpr cast_expr = 5;
    ExprBetween expr_between = 6;
    ExprIn expr_in = 7;
    ExprAny expr_any = 8;
    ExprNullTests expr_null_tests = 9;
    ExprCase expr_case = 10;
    ExprExists expr_exists = 11;
    ExprLike expr_like = 12;
    CondExpr expr_cond = 13;
    Select subquery = 14;
    SQLFuncCall func_call = 15;
    WindowFuncCall window_call = 16;
    ArraySequence array = 17;
    TupleSequence tuple = 18;
    IntervalExpr interval = 19;
  }
}

message Expr {
  oneof expr_oneof {
    LiteralValue lit_val = 1;
    ComplicatedExpr comp_expr = 2;
  }
  optional FieldAccess field = 3;
}

message ExprColAlias {
  required Expr expr = 1;
  optional Column col_alias = 2;
}

message ResultColumn {
  oneof result_col_oneof {
    ExprSchemaTableColumn etc = 1;
    ExprColAlias eca = 2;
    Table table_star = 3;
  }
}

message ExprSchemaTable {
  required Table table_name = 1;
}

message ExprColumnList {
  required ExprColumn col = 1;
  repeated ExprColumn extra_cols = 2;
}

enum InFormat {
  IN_TabSeparated = 1;
  IN_TabSeparatedRaw = 2;
  IN_TabSeparatedWithNames = 3;
  IN_TabSeparatedWithNamesAndTypes = 4;
  IN_TabSeparatedRawWithNames = 5;
  IN_TabSeparatedRawWithNamesAndTypes = 6;
  IN_Template = 7;
  IN_TemplateIgnoreSpaces = 8;
  IN_CSV = 9;
  IN_CSVWithNames = 10;
  IN_CSVWithNamesAndTypes = 11;
  IN_CustomSeparated = 12;
  IN_CustomSeparatedWithNames = 13;
  IN_CustomSeparatedWithNamesAndTypes = 14;
  IN_Values = 15;
  IN_JSON = 16;
  IN_JSONAsString = 17;
  IN_JSONAsObject = 18;
  IN_JSONStrings = 19;
  IN_JSONColumns = 20;
  IN_JSONColumnsWithMetadata = 21;
  IN_JSONCompact = 22;
  IN_JSONCompactColumns = 23;
  IN_JSONEachRow = 24;
  IN_JSONStringsEachRow = 25;
  IN_JSONCompactEachRow = 26;
  IN_JSONCompactEachRowWithNames = 27;
  IN_JSONCompactEachRowWithNamesAndTypes = 28;
  IN_JSONCompactStringsEachRow = 29;
  IN_JSONCompactStringsEachRowWithNames = 30;
  IN_JSONCompactStringsEachRowWithNamesAndTypes = 31;
  IN_JSONObjectEachRow = 32;
  IN_BSONEachRow = 33;
  IN_TSKV = 34;
  IN_Protobuf = 35;
  IN_ProtobufSingle = 36;
  IN_ProtobufList = 37;
  IN_Avro = 38;
  IN_AvroConfluent = 39;
  IN_Parquet = 40;
  IN_ParquetMetadata = 41;
  IN_Arrow = 42;
  IN_ArrowStream = 43;
  IN_ORC = 44;
  IN_One = 45;
  IN_Npy = 46;
  IN_RowBinary = 47;
  IN_RowBinaryWithNames = 48;
  IN_RowBinaryWithNamesAndTypes = 49;
  IN_RowBinaryWithDefaults = 50;
  IN_Native = 51;
  IN_CapnProto = 52;
  IN_LineAsString = 53;
  IN_Regexp = 54;
  IN_RawBLOB = 55;
  IN_MsgPack = 56;
  IN_MySQLDump = 57;
  IN_DWARF = 58;
  IN_Form = 59;
}

enum OutFormat {
  OUT_TabSeparated = 1;
  OUT_TabSeparatedRaw = 2;
  OUT_TabSeparatedWithNames = 3;
  OUT_TabSeparatedWithNamesAndTypes = 4;
  OUT_TabSeparatedRawWithNames = 5;
  OUT_TabSeparatedRawWithNamesAndTypes = 6;
  OUT_Template = 7;
  OUT_CSV = 8;
  OUT_CSVWithNames = 9;
  OUT_CSVWithNamesAndTypes = 10;
  OUT_CustomSeparated = 11;
  OUT_CustomSeparatedWithNames = 12;
  OUT_CustomSeparatedWithNamesAndTypes = 13;
  OUT_SQLInsert = 14;
  OUT_Values = 15;
  OUT_Vertical = 16;
  OUT_JSON = 17;
  OUT_JSONStrings = 18;
  OUT_JSONColumns = 19;
  OUT_JSONColumnsWithMetadata = 20;
  OUT_JSONCompact = 21;
  OUT_JSONCompactStrings = 22;
  OUT_JSONCompactColumns = 23;
  OUT_JSONEachRow = 24;
  OUT_PrettyJSONEachRow = 25;
  OUT_JSONEachRowWithProgress = 26;
  OUT_JSONStringsEachRow = 27;
  OUT_JSONStringsEachRowWithProgress = 28;
  OUT_JSONCompactEachRow = 29;
  OUT_JSONCompactEachRowWithNames = 30;
  OUT_JSONCompactEachRowWithNamesAndTypes = 31;
  OUT_JSONCompactStringsEachRow = 32;
  OUT_JSONCompactStringsEachRowWithNames = 33;
  OUT_JSONCompactStringsEachRowWithNamesAndTypes = 34;
  OUT_JSONObjectEachRow = 35;
  OUT_BSONEachRow = 36;
  OUT_TSKV = 37;
  OUT_Pretty = 38;
  OUT_PrettyNoEscapes = 39;
  OUT_PrettyMonoBlock = 40;
  OUT_PrettyNoEscapesMonoBlock = 41;
  OUT_PrettyCompact = 42;
  OUT_PrettyCompactNoEscapes = 43;
  OUT_PrettyCompactMonoBlock = 44;
  OUT_PrettyCompactNoEscapesMonoBlock = 45;
  OUT_PrettySpace = 46;
  OUT_PrettySpaceNoEscapes = 47;
  OUT_PrettySpaceMonoBlock = 48;
  OUT_PrettySpaceNoEscapesMonoBlock = 49;
  OUT_Prometheus = 50;
  OUT_Protobuf = 51;
  OUT_ProtobufSingle = 52;
  OUT_ProtobufList = 53;
  OUT_Avro = 54;
  OUT_Parquet = 55;
  OUT_Arrow = 56;
  OUT_ArrowStream = 57;
  OUT_ORC = 58;
  OUT_Npy = 59;
  OUT_RowBinary = 60;
  OUT_RowBinaryWithNames = 61;
  OUT_RowBinaryWithNamesAndTypes = 62;
  OUT_Native = 63;
  OUT_Null = 64;
  OUT_XML = 65;
  OUT_CapnProto = 66;
  OUT_LineAsString = 67;
  OUT_RawBLOB = 68;
  OUT_MsgPack = 69;
  OUT_Markdown = 70;
}

message UsingExpr {
  required ExprColumnList col_list = 1;
}

message JoinConstraint {
  oneof join_constraint_oneof {
    Expr on_expr = 1;
    UsingExpr using_expr = 2;
  }
}

message JoinCore {
  enum JoinType {
    LEFT = 1;
    INNER = 2;
    RIGHT = 3;
    FULL = 4;
    PASTE = 5;
    CROSS = 6;
  }
  enum JoinConst {
    ANY = 1;
    ALL = 2;
    SEMI = 3;
    ANTI = 4;
    ASOF = 5;
  }
  optional bool global = 1;
  optional JoinType join_op = 2;
  optional JoinConst join_const = 3;
  required TableOrSubquery tos = 4;
  required JoinConstraint join_constraint = 5;
}

message ArrayJoin {
  optional bool left = 1;
  required ExprColAlias constraint = 2;
}

message JoinClauseCore {
  oneof join_clause_oneof {
    JoinCore core = 1;
    ArrayJoin arr = 2;
  }
}

message JoinClause {
  required TableOrSubquery tos = 1;
  repeated JoinClauseCore clauses = 2;
}

message JoinedDerivedQuery {
  required Select select = 1;
  required Table table_alias = 2;
}

message JoinedTable {
  required ExprSchemaTable est = 1;
  optional Table table_alias = 2;
  optional bool final = 3;
}

enum FileCompression {
  COMPgz = 1;
  COMPbr = 2;
  COMPxz = 3;
  COMPzst = 4;
  COMPlz4 = 5;
  COMPbz2 = 6;
}

message FileFunc {
  required string path = 1;
  oneof file_func_oneof {
    InFormat informat = 2;
    OutFormat outformat = 3;
  }
  required string structure = 4;
  optional FileCompression fcomp = 5;
}

message FormatFunc {
  required InFormat format = 1;
  required string structure = 2;
  required string data = 3;
}

message GenerateSeriesFunc {
  enum GSName {
    generate_series = 1;
    generateSeries = 2;
    numbers = 3;
  }
  required GSName fname = 1;
  required Expr expr1 = 2;
  optional Expr expr2 = 3;
  optional Expr expr3 = 4;
}

message TableFunction {
  oneof jtf_oneof {
    FileFunc file = 1;
    FormatFunc format = 2;
    GenerateSeriesFunc gseries = 3;
  }
}

message JoinedTableFunction {
  required TableFunction tfunc = 1;
  optional Table table_alias = 2;
}

message TableOrSubquery {
  oneof tos_oneof {
    JoinedTable joined_table = 1;
    JoinedDerivedQuery joined_derived_query = 2;
    JoinedTableFunction joined_table_function = 3;
    JoinedQuery joined_query = 4;
  }
}

message JoinedQuery {
  repeated TableOrSubquery tos_list = 1;  // if empty, use the join clause
  required JoinClause join_clause = 2;
}

message FromStatement {
  required JoinedQuery tos = 1;
}

message ColumnComparison {
  required ExprSchemaTableColumn col = 1;
  required BinaryOperator op = 2;
  required Expr expr = 3;
}

message ExprComparisonHighProbability {
  oneof expr_comp_oneof {
    ColumnComparison cc = 1;
    Expr expr = 2;
  }
}

message WhereStatement {
  required ExprComparisonHighProbability expr = 1;
}

message GroupByList {
  enum GroupingSets {
    ROLLUP = 1;
    CUBE = 2;
  }
  required ExprList exprs = 1;
  optional GroupingSets gs = 2;
  optional bool with_totals = 3;
}

message GroupByStatement {
  oneof group_by_oneof {
    GroupByList glist = 1;
    bool gall = 2;
  }
  optional Expr having_expr = 3;
}

message LimitStatement {
  required uint32 limit = 1;
  optional uint32 offset = 2;
  optional bool with_ties = 3;
  optional Expr limit_by = 4;
}

enum AllOrDistinct {
  DISTINCT = 1;
  ALL = 2;
}

message SelectStatementCore {
  optional AllOrDistinct s_or_d = 1;
  repeated ResultColumn result_columns = 2;
  optional FromStatement from = 3;
  optional WhereStatement pre_where = 4;
  optional WhereStatement where = 5;
  optional GroupByStatement groupby = 6;
  //optional WindowStatement window = 6;
  optional OrderByStatement orderby = 7;
  optional LimitStatement limit = 8;
}

message SetQuery {
  enum SetOp {
    UNION = 1;
    EXCEPT = 2;
    INTERSECT = 3;
  }
  required Select sel1 = 1;
  required SetOp set_op = 2;
  required AllOrDistinct s_or_d = 3;
  required Select sel2 = 4;
}

message CTEquery {
  required Table table = 1;
  required Select query = 2;
}

message Select {
  repeated CTEquery ctes = 1;
  oneof select_oneof {
    SelectStatementCore select_core = 2;
    SetQuery set_query = 3;
  }
}

message Decimal {
  optional uint32 precision = 1;
  optional uint32 scale = 2;
}

message ColumnPath {
  required Column col = 1;
  repeated Column sub_cols = 2;
}

message JsonPathType {
  required ColumnPath col = 1;
  required TopTypeName type = 2;
}

message JsonDefItem {
  oneof json_spec_oneof {
    uint32 max_dynamic_paths = 1;
    uint32 max_dynamic_types = 2;
    ColumnPath skip_path = 3;
    JsonPathType path_type = 4;
  }
}

message JsonDef {
  repeated JsonDefItem spec = 1;
}

message EnumDef {
  optional bool bits = 1; //false for 8 or true for 16
  required int32 first_value = 2;
  repeated int32 other_values = 3;
}

message Dynamic {
  optional uint32 ntypes = 1;
}

message LowCardinality {
  oneof lcard_one_of {
    Integers integers = 1;
    FloatingPoints floats = 2;
    bool sql_string = 3;
    uint32 fixed_string = 4;
    Dates dates = 5;
  }
}

message BottomTypeName {
  oneof bottom_one_of {
    Integers integers = 1;
    FloatingPoints floats = 2;
    Decimal decimal = 3;
    bool boolean = 4;
    bool sql_string = 5;
    uint32 fixed_string = 6;
    bool uuid = 7;
    Dates dates = 8;
    JsonDef json = 9;
    Dynamic dynamic = 10;
    EnumDef enum_def = 11;
    LowCardinality lcard = 12;
  }
}

message MapType {
  required TopTypeName key = 1;
  required TopTypeName value = 2;
}

message TypeColumnDef {
  required Column col = 1;
  required TopTypeName type_name = 2;
}

message TupleType {
  required TypeColumnDef value1 = 1;
  required TypeColumnDef value2 = 2;
  repeated TypeColumnDef others = 3;
}

message VariantType {
  required TopTypeName value1 = 1;
  required TopTypeName value2 = 2;
  repeated TopTypeName others = 3;
}

message NestedType {
  required TypeColumnDef type1 = 1;
  repeated TypeColumnDef others = 2;
}

message TopTypeName {
  oneof type_oneof {
    BottomTypeName non_nullable = 1;
    BottomTypeName nullable = 2;
    TopTypeName array = 3;
    MapType map = 4;
    TupleType tuple = 5;
    NestedType nested = 6;
    VariantType variant = 7;
  }
}

message TypeName {
  required TopTypeName type = 1;
}

enum ColumnStat {
  STATMinMax = 1;
  STATTDigest = 2;
  STATUniq = 3;
  STATCountMin = 4;
}

message ColumnStatistics {
  required ColumnStat stat = 1;
  repeated ColumnStat other_stats = 2;
}

message SetValue {
  required string property = 1;
  required string value = 2;
}

message SettingValues {
  required SetValue set_value = 1;
  repeated SetValue other_values = 2;
}

enum CompressionCodec {
  COMPDefault = 1;
  COMPNONE = 2;
  COMPLZ4 = 3;
  COMPLZ4HC = 4;
  COMPZSTD = 5;
  COMPZSTD_QAT = 6;
  COMPDEFLATE_QPL = 7;
  COMPDelta = 8;
  COMPDoubleDelta = 9;
  COMPGCD = 10;
  COMPGorilla = 11;
  COMPFPC = 12;
  COMPT64 = 13;
  COMPAES_128_GCM_SIV = 14;
  COMPAES_256_GCM_SIV = 15;
}

message CodecParam {
  required CompressionCodec codec = 1;
  repeated uint32 params = 2;
}

message ColumnDef {
  required Column col = 1;
  required TypeName type = 2;
  optional bool nullable = 3;
  repeated CodecParam codecs = 4;
  optional ColumnStatistics stats = 5;
  optional SettingValues settings = 6;
}

enum IndexType {
  IDXset = 1;
  IDXminmax = 2;
  IDXhypothesis = 3;
  IDXbloom_filter = 4;
  IDXngrambf_v1 = 5;
  IDXtokenbf_v1 = 6;
  IDXfull_text = 7;
  IDXinverted = 8;
}

message IndexParam {
  oneof param_oneof {
    double dval = 1;
    uint32 ival = 2;
  }
}

message IndexDef {
  required Index idx = 1;
  required Expr expr = 2;
  required IndexType type = 3;
  repeated IndexParam params = 4;
  optional uint32 granularity = 5;
}

message ProjectionDef {
  required Projection proj = 1;
  required Select select = 2;
}

message ConstraintDef {
  enum ConstraintType {
    CHECK = 1;
    ASSUME = 2;
  }
  required Constraint constr = 1;
  required ConstraintType ctype = 2;
  required Expr expr = 3;
}

message TableDefItem {
  oneof createdef_oneof {
    ColumnDef col_def = 1;
    IndexDef idx_def = 2;
    ProjectionDef proj_def = 3;
    ConstraintDef const_def = 4;
  }
}

message TableDef {
  required ColumnDef col_def = 1;
  repeated TableDefItem other_defs = 2;
}

message TableKey {
  repeated Expr exprs = 1;
}

enum TableEngineValues {
  Memory = 1;
  //require order by
  MergeTree = 2;
  ReplacingMergeTree = 3;
  SummingMergeTree = 4;
  AggregatingMergeTree = 5;
  CollapsingMergeTree = 6;
  VersionedCollapsingMergeTree = 7;
  //GraphiteMergeTree = 8;
  //end require order by
  StripeLog = 8;
  Log = 9;
  TinyLog = 10;
}

message TableEngine {
  required TableEngineValues engine = 1;
  repeated Column cols = 2;
  optional TableKey order = 3;
  optional TableKey partition_by = 4;
  optional TableKey primary_key = 5;
}

message CreateTable {
  optional bool replace = 1;
  optional bool is_temp = 2;
  optional bool if_not_exists = 3;
  required ExprSchemaTable est = 4;
  oneof create_table_oneof {
    TableDef table_def = 5;
    ExprSchemaTable table_like = 6;
  }
  required TableEngine engine = 7;
  optional SettingValues settings = 8;
  optional Select as_select_stmt = 9;
}

message Drop {
  enum WhatToDrop {
    TABLE = 1;
    VIEW = 2;
  }
  optional bool is_temp = 1;
  required WhatToDrop wdrop = 2;
  optional bool if_exists = 3;
  optional bool if_empty = 4;
  required ExprSchemaTable est = 5;
  repeated ExprSchemaTable other_tables = 6;
  optional bool sync = 7;
}

message ValuesStatement {
  required ExprList expr_list = 1;
  repeated ExprList extra_expr_lists = 2;
}

message InsertIntoTable {
  required ExprSchemaTable est = 1;
  repeated ColumnPath cols = 2;
}

message InsertFromFile {
  required string path = 1;
  optional FileCompression fcomp = 2;
  required InFormat format = 3;
}

message Insert {
  oneof into_oneof {
    InsertIntoTable itable = 1;
    TableFunction tfunction = 2;
  }
  oneof insert_oneof {
    ValuesStatement values = 3;
    Select select = 4;
    InsertFromFile ffile = 5;
    string query = 6;
  }
}

message Delete {
  required ExprSchemaTable est = 1;
  required WhereStatement where = 2;
}

message Truncate {
  oneof truncate_oneof {
    ExprSchemaTable est = 1;
    bool all = 2;
  }
}

enum ExpPlanOpt {
  VAL1_HEADER = 1;
  VAL1_DESCRIPTION = 2;
  VAL1_INDEXES = 3;
  VAL1_ACTIONS = 4;
  VAL1_JSON = 5;
}

enum ExpPipelineOpt {
  VAL2_HEADER = 1;
  VAL2_GRAPH = 2;
  VAL2_COMPACT = 3;
}

enum ExpQueryTreeOpt {
  VAL3_RUN_PASSES = 1;
  VAL3_DUMP_PASSES = 2;
  VAL3_PASSES = 3;
}

message ExplainOption {
  required uint32 opt = 1;
  required bool val = 2;
}

message TopSelect {
  required Select sel = 1;
  optional OutFormat format = 2;
}

message CheckTable {
  required ExprSchemaTable est = 1;
  optional bool single_result = 2;
}

message DescTable {
  required ExprSchemaTable est = 1;
  optional bool sub_cols = 2;
}

message DeduplicateExpr {
  optional ExprColumnList col_list = 1;
}

message OptimizeTable {
  required ExprSchemaTable est = 1;
  optional bool final = 2;
  optional DeduplicateExpr dedup = 3;
}

message ExchangeTables {
  required ExprSchemaTable est1 = 1;
  required ExprSchemaTable est2 = 2;
}

message UpdateSet {
  required ColumnPath col = 1;
  required Expr expr = 2;
}

message Update {
  required UpdateSet update = 1;
  repeated UpdateSet other_updates = 2;
  required WhereStatement where = 3;
}

message AddWhere {
  oneof add_where_oneof {
    Column col = 1;
    Index idx = 2;
    bool first = 3;
  }
}

message AddColumn {
  required ColumnDef new_col = 1;
  optional AddWhere add_where = 2;
}

message RenameCol {
  required Column old_name = 1;
  required Column new_name = 2;
}

message AddStatistics {
  required ColumnList cols = 1;
  required ColumnStatistics stats = 2;
}

message AddIndex {
  required IndexDef new_idx = 1;
  optional AddWhere add_where = 2;
}

message RemoveColumnProperty {
  enum ColumnProperties {
    DEFAULT = 1;
    ALIAS = 2;
    MATERIALIZED = 3;
    CODEC = 4;
    COMMENT = 5;
    TTL = 6;
    SETTINGS = 7;
  }
  required Column col = 1;
  required ColumnProperties property = 2;
}

message ModifyColumnSetting {
  required Column col = 1;
  required SettingValues settings = 2;
}

message SettingList {
  required string setting = 1;
  repeated string other_settings = 2;
}

message RemoveColumnSetting {
  required Column col = 1;
  required SettingList settings = 2;
}

message AlterTableItem {
  oneof alter_oneof {
    WhereStatement del = 1;
    Update update = 2;
    TableKey order = 3;
    Column materialize_column = 4;
    AddColumn add_column = 5;
    Column drop_column = 6;
    RenameCol rename_column = 7;
    AddColumn modify_column = 8;
    bool delete_mask = 9;
    AddStatistics add_stats = 10;
    AddStatistics mod_stats = 11;
    ColumnList drop_stats = 12;
    ColumnList clear_stats = 13;
    ColumnList mat_stats = 14;
    AddIndex add_index = 15;
    Index materialize_index = 16;
    Index drop_index = 17;
    Index clear_index = 18;
    RemoveColumnProperty column_remove_property = 19;
    ModifyColumnSetting column_modify_setting = 20;
    RemoveColumnSetting column_remove_setting = 21;
    SettingValues table_modify_setting = 22;
    SettingList table_remove_setting = 23;
    ProjectionDef add_projection = 24;
    Projection remove_projection = 25;
    Projection materialize_projection = 26;
    Projection clear_projection = 27;
    ConstraintDef add_constraint = 28;
    Constraint remove_constraint = 29;
    Select modify_query = 30;
  }
}

message AlterTable {
  required ExprSchemaTable est = 1;
  required AlterTableItem alter = 2;
  repeated AlterTableItem other_alters = 3;
}

message CreateView {
  optional bool materialized = 1;
  required ExprSchemaTable est = 2;
  optional ExprSchemaTable to_est = 3;
  optional TableEngine engine = 4;
  optional bool populate = 5;
  required Select select = 6;
}

message SQLQueryInner {
  oneof query_inner_oneof {
    TopSelect select = 1;
    CreateTable create_table = 2;
    Drop drop = 3;
    Insert insert = 4;
    Delete del = 5;
    Truncate trunc = 6;
    OptimizeTable opt = 7;
    CheckTable check = 8;
    DescTable desc = 9;
    ExchangeTables exchange = 10;
    AlterTable alter_table = 11;
    SettingValues setting_values = 12;
    CreateView create_view = 13;
  }
  required TopSelect def_select = 14;
}

message ExplainQuery {
  enum ExplainValues {
    PLAN = 1;
    PIPELINE = 2;
    QUERY_TREE = 3;
    AST = 4;
    SYNTAX = 5;
    ESTIMATE = 6;
    TABLE_OVERRIDE = 7;
  }
  optional ExplainValues expl = 1;
  repeated ExplainOption opts = 2;
  required SQLQueryInner inner_query = 3;
}

message SQLQuery {
  oneof query_oneof {
    SQLQueryInner inner_query = 1;
    ExplainQuery explain = 2;
    bool start_trans = 3;
    bool commit_trans = 4;
    bool rollback_trans = 5;
  }
}
