Negative tests
1
1
Test what happens hasAnyTokens/All are called on columns without index
-- It is expected that the default tokenizer is used
-- { echoOn }
SELECT hasAnyTokens('a b', ['b']);
1
SELECT hasAnyTokens('a b', ['c']);
0
SELECT hasAnyTokens(materialize('a b'), ['b']);
1
SELECT hasAnyTokens(materialize('a b'), ['c']);
0
--
SELECT hasAllTokens('a b', ['a', 'b']);
1
SELECT hasAllTokens('a b', ['a', 'c']);
0
SELECT hasAllTokens(materialize('a b'), ['a', 'b']);
1
SELECT hasAllTokens(materialize('a b'), ['a', 'c']);
0
-- Test singular aliases
SELECT hasAnyToken('a b', ['b']);
1
SELECT hasAnyToken('a b', ['c']);
0
SELECT hasAllToken('a b', ['b']);
1
SELECT hasAllToken('a b', ['c']);
0
-- These are equivalent to the lines above, but using Search{Any,All} in the filter step.
-- We keep this test because the direct read optimization substituted Search{Any,All} only
-- when they are in the filterStep, and we want to detect any variation eagerly.
SELECT id FROM tab WHERE hasAnyTokens('a b', ['b']);
1
2
3
SELECT id FROM tab WHERE hasAnyTokens('a b', ['c']);
SELECT id FROM tab WHERE hasAnyTokens(col_str, ['b']);
1
SELECT id FROM tab WHERE hasAnyTokens(col_str, ['c']);
2
SELECT id FROM tab WHERE hasAnyTokens('a b', 'b'); -- { serverError BAD_ARGUMENTS }
SELECT id FROM tab WHERE hasAnyTokens('a b', 'c'); -- { serverError BAD_ARGUMENTS }
SELECT id FROM tab WHERE hasAnyTokens(col_str, 'b'); -- { serverError BAD_ARGUMENTS }
SELECT id FROM tab WHERE hasAnyTokens(col_str, 'c'); -- { serverError BAD_ARGUMENTS }
SELECT id FROM tab WHERE hasAllTokens('a b', ['a b']);
SELECT id FROM tab WHERE hasAllTokens('a b', ['a c']);
SELECT id FROM tab WHERE hasAllTokens(col_str, ['a b']);
SELECT id FROM tab WHERE hasAllTokens(col_str, ['a c']);
SELECT id FROM tab WHERE hasAllTokens('a b', 'a b'); -- { serverError BAD_ARGUMENTS }
SELECT id FROM tab WHERE hasAllTokens('a b', 'a c'); -- { serverError BAD_ARGUMENTS }
SELECT id FROM tab WHERE hasAllTokens(col_str, 'a a'); -- { serverError BAD_ARGUMENTS }
SELECT id FROM tab WHERE hasAllTokens(col_str, 'b c'); -- { serverError BAD_ARGUMENTS }
Testing edge cases on non-indexed column
3
3
FixedString input columns
[1]
[1]
[1]
[1]
-- Default tokenizer
[1,2,3,4,5,6]
[]
[1,3,5]
[2,4,6]
[1,2,3,4,5,6]
[1,2,3,4,5,6]
[1,2,3,4,5,6]
[1,3,5]
[]
[]
[1,3,5]
[1,2,3,4,5,6]
[]
[1,2,3,4,5,6]
[]
[1,3,5]
[2,4,6]
[1,3,5]
[2,4,6]
[]
[]
[]
[1,3,5]
[1,3,5]
[]
[1,2,3,4,5,6]
[1,2,3,4,5,6]
-- Ngram tokenizer
[3,4,5]
[]
[1,2,3]
[2,3,4]
[1,2,3,4]
[1,2,3,4,5]
[3,4,5]
[1,2,3,4,5]
[3,4,5]
[1,2,3,4]
[1,2,3,4,5]
[3,4,5]
[]
[1,2,3]
[2,3,4]
[2,3]
[3]
[3,4,5]
[1,2,3,4,5]
[4,5]
[2,3]
[3]
-- Split tokenizer
[2,3]
[2,4,5]
[2,5]
[2,3,4,5]
[2,3,5]
[2,4,5]
[]
[]
[2,5]
[2,3,4,5]
[]
[3]
[2,3]
[2,4,5]
[2,5]
[2]
[2]
[2,5]
[]
[]
[2,5]
[2]
[]
[3]
-- NoOp tokenizer
[]
[]
[]
[4]
[]
[1]
[]
[]
[]
[4]
[]
[1]
[]
Duplicate tokens
2
2
2
2
2
2
Combination with the tokens function
-- Default tokenizer
[1,2,3,4,5,6]
[]
[1,3,5]
[2,4,6]
[1,2,3,4,5,6]
[1,2,3,4,5,6]
[1,2,3,4,5,6]
[1,3,5]
[]
[1,2,3,4,5,6]
[]
[1,3,5]
[2,4,6]
[1,3,5]
[2,4,6]
[]
[]
-- Ngram tokenizer
[3,4,5]
[]
[1,2,3]
[2,3,4]
[1,2,3,4]
[1,2,3,4,5]
[3,4,5]
[]
[1,2,3]
[2,3,4]
[2,3]
[3]
-- Split tokenizer
[2,3]
[2,4,5]
[2,5]
[2,3,4,5]
[2,3,5]
[2,4,5]
[2,3]
[2,4,5]
[2,5]
[2]
[2]
[2,5]
-- NoOp tokenizer
[]
[]
[]
[4]
[]
[]
[]
[4]
Text index analysis
hasAnyTokens is used during index analysis
Text index overload 1 should choose none for non-existent term
Description: text GRANULARITY 1
Parts: 0/4
Granules: 0/4096
Text index overload 2 should choose none for non-existent term
Description: text GRANULARITY 1
Parts: 0/4
Granules: 0/4096
Text index overload 1 should choose 1 part and 1024 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 1/4
Granules: 1024/4096
Text index overload 2 should choose 1 part and 1024 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 1/4
Granules: 1024/4096
Text index overload 1 should choose 1 part and 1024 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 1/4
Granules: 1024/4096
Text index overload 2 should choose 1 part and 1024 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 1/4
Granules: 1024/4096
Text index should choose 2 parts and 2048 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 2/4
Granules: 2048/4096
Text index should choose 2 parts and 2048 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 2/4
Granules: 2048/4096
Text index should choose 3 parts and 3072 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 3/4
Granules: 3072/4096
Text index should choose 3 parts and 3072 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 3/4
Granules: 3072/4096
Text index should choose all 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 4/4
Granules: 4096/4096
hasAllTokens is used during index analysis
Text index overload 1 should choose none for non-existent term
Description: text GRANULARITY 1
Parts: 0/4
Granules: 0/4096
Text index overload 2 should choose none for non-existent term
Description: text GRANULARITY 1
Parts: 0/4
Granules: 0/4096
Text index overload 1 should choose 1 part and 1024 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 1/4
Granules: 1024/4096
Text index overload 2 should choose 1 part and 1024 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 1/4
Granules: 1024/4096
Text index overload 1 should choose 1 part and 1024 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 1/4
Granules: 1024/4096
Text index overload 2 should choose 1 part and 1024 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 1/4
Granules: 1024/4096
Text index overload 1 should choose none if any term does not exists in dictionary
Description: text GRANULARITY 1
Parts: 0/4
Granules: 0/4096
Text index overload 2 should choose none if any term does not exists in dictionary
Description: text GRANULARITY 1
Parts: 0/4
Granules: 0/4096
Text index should choose 2 parts and 2048 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 2/4
Granules: 2048/4096
Text index should choose none
Description: text GRANULARITY 1
Parts: 0/4
Granules: 0/4096
Text index should choose none
Description: text GRANULARITY 1
Parts: 0/4
Granules: 0/4096
Text index should choose 3 parts and 3072 granules out of 4 parts and 4096 granules
Description: text GRANULARITY 1
Parts: 3/4
Granules: 3072/4096
Text index should choose none
Description: text GRANULARITY 1
Parts: 0/4
Granules: 0/4096
Chooses mixed granules inside part
Text index should choose 50% of granules
Description: text GRANULARITY 1
Parts: 1/1
Granules: 512/1024
Text index should choose all granules
Description: text GRANULARITY 1
Parts: 1/1
Granules: 1024/1024
Text index should choose 25% of granules
Description: text GRANULARITY 1
Parts: 1/1
Granules: 256/1024
Test hasAnyTokens and hasAllTokens on a non-indexed FixedString column
1
3
2
3
2
1
2
3
