set optimize_read_in_order=1;

drop table if exists test;

{% for create_command in ['create table test (id UInt64, a Tuple(b Tuple(c UInt32, d String, e Array(UInt32))), data String) engine=MergeTree order by (a.b.c, a.b.d) settings min_rows_for_wide_part=100000000, min_bytes_for_wide_part=1000000000, vertical_merge_algorithm_min_columns_to_activate=10;',
                          'create table test (id UInt64, a Tuple(b Tuple(c UInt32, d String, e Array(UInt32))), data String) engine=MergeTree order by (a.b.c, a.b.d) settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, vertical_merge_algorithm_min_columns_to_activate=10;',
                          'create table test (id UInt64, a Tuple(b Tuple(c UInt32, d String, e Array(UInt32))), data String) engine=MergeTree order by (a.b.c, a.b.d) settings min_rows_for_wide_part=100000000, min_bytes_for_wide_part=1000000000, vertical_merge_algorithm_min_columns_to_activate=1;',
                          'create table test (id UInt64, a Tuple(b Tuple(c UInt32, d String, e Array(UInt32))), data String) engine=MergeTree order by (a.b.c, a.b.d) settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, vertical_merge_algorithm_min_columns_to_activate=1;'] -%}

select '{{ create_command }}';

{{ create_command }}

system stop merges test;
insert into test select number, tuple(tuple(number % 2, 'str_' || number % 3, range(number))), 'Hello, World!' from numbers(4);
insert into test select number, tuple(tuple(number % 2, 'str_' || number % 3, range(number))), 'Hello, World!' from numbers(4, 4);

select * from test order by a.b.c, id;
select * from test order by a.b.c desc, id;
select * from test order by a.b.d, id;
select * from test order by a.b.d desc, id;
select * from test order by a.b.c, a.b.d, id;
select * from test order by a.b.c desc, a.b.d, id;
select * from test order by a.b.c, a.b.d desc, id;
select * from test order by a.b.c desc, a.b.d desc, id;

system start merges test;
optimize table test final;
select count() from system.parts where active and table = 'test' and database = currentDatabase();

select * from test order by a.b.c, id;
select * from test order by a.b.c desc, id;
select * from test order by a.b.d, id;
select * from test order by a.b.d desc, id;
select * from test order by a.b.c, a.b.d, id;
select * from test order by a.b.c desc, a.b.d, id;
select * from test order by a.b.c, a.b.d desc, id;
select * from test order by a.b.c desc, a.b.d desc, id;

truncate table test;

insert into test select number, tuple(tuple(number % 1000, 'str_' || number % 100, range(number % 10))), 'Hello, World!' from numbers(100000);
insert into test select number, tuple(tuple(number % 1000, 'str_' || number % 100, range(number % 10))), 'Hello, World!' from numbers(200000, 100000);

select * from test order by a.b.c format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c) where explain ilike '%sort%';
select * from test order by a.b.c desc format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c desc) where explain ilike '%sort%';
select * from test order by a.b.d format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.d) where explain ilike '%sort%';
select * from test order by a.b.d desc format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.d desc) where explain ilike '%sort%';
select * from test order by a.b.c, a.b.d format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c, a.b.d) where explain ilike '%sort%';
select * from test order by a.b.c desc, a.b.d format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c desc, a.b.d) where explain ilike '%sort%';
select * from test order by a.b.c, a.b.d desc format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c, a.b.d desc) where explain ilike '%sort%';
select * from test order by a.b.c desc, a.b.d desc format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c desc, a.b.d desc) where explain ilike '%sort%';

system start merges test;
optimize table test final;
select count() from system.parts where active and table = 'test' and database = currentDatabase();

select * from test order by a.b.c format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c) where explain ilike '%sort%';
select * from test order by a.b.c desc format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c desc) where explain ilike '%sort%';
select * from test order by a.b.d format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.d) where explain ilike '%sort%';
select * from test order by a.b.d desc format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.d desc) where explain ilike '%sort%';
select * from test order by a.b.c, a.b.d format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c, a.b.d) where explain ilike '%sort%';
select * from test order by a.b.c desc, a.b.d format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c desc, a.b.d) where explain ilike '%sort%';
select * from test order by a.b.c, a.b.d desc format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c, a.b.d desc) where explain ilike '%sort%';
select * from test order by a.b.c desc, a.b.d desc format Null;
select trimLeft(explain) from (explain sorting=1 select * from test order by a.b.c desc, a.b.d desc) where explain ilike '%sort%';

drop table test;

{% endfor -%}

