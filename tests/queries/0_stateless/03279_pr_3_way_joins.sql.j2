SET enable_analyzer = 1;
SET enable_parallel_replicas = 1, max_parallel_replicas = 3, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost';

DROP TABLE IF EXISTS test_table_join_1 SYNC;
CREATE TABLE test_table_join_1
(
    id UInt8,
    value String
) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_table_join_1', 'r1') ORDER BY value SETTINGS index_granularity=1;

DROP TABLE IF EXISTS test_table_join_2 SYNC;
CREATE TABLE test_table_join_2
(
    id UInt16,
    value String
) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_table_join_2', 'r1') ORDER BY value SETTINGS index_granularity=1;

DROP TABLE IF EXISTS test_table_join_3 SYNC;
CREATE TABLE test_table_join_3
(
    id UInt64,
    value String
) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_table_join_3', 'r1') ORDER BY value SETTINGS index_granularity=1;

INSERT INTO test_table_join_1 VALUES (0, 'Join_1_Value_0');
INSERT INTO test_table_join_1 VALUES (1, 'Join_1_Value_1');
INSERT INTO test_table_join_1 VALUES (2, 'Join_1_Value_2');

INSERT INTO test_table_join_2 VALUES (0, 'Join_2_Value_0');
INSERT INTO test_table_join_2 VALUES (1, 'Join_2_Value_1');
INSERT INTO test_table_join_2 VALUES (3, 'Join_2_Value_3');

INSERT INTO test_table_join_3 VALUES (0, 'Join_3_Value_0');
INSERT INTO test_table_join_3 VALUES (1, 'Join_3_Value_1');
INSERT INTO test_table_join_3 VALUES (4, 'Join_3_Value_4');

-- { echoOn }

{% for parallel_replicas_local_plan in ['0', '1'] -%}
{% for first_join_type in ['INNER', 'LEFT', 'RIGHT', 'FULL'] -%}
{% for second_join_type in ['INNER', 'LEFT', 'RIGHT', 'FULL'] -%}

SELECT 'First JOIN {{ first_join_type }} second JOIN {{ second_join_type }}';

SELECT id AS using_id, toTypeName(using_id), t1.id AS t1_id, toTypeName(t1_id), t1.value AS t1_value, toTypeName(t1_value),
t2.id AS t2_id, toTypeName(t2_id), t2.value AS t2_value, toTypeName(t2_value), t3.id AS t3_id, toTypeName(t3_id), t3.value AS t3_value, toTypeName(t3_value)
FROM test_table_join_1 AS t1 {{ first_join_type }} JOIN test_table_join_2 AS t2 USING (id) {{ second_join_type }} JOIN test_table_join_3 AS t3 USING(id)
ORDER BY ALL
SETTINGS parallel_replicas_local_plan={{ parallel_replicas_local_plan }};

{% endfor %}
{% endfor %}
{% endfor %}

-- { echoOff }

DROP TABLE test_table_join_1 SYNC;
DROP TABLE test_table_join_2 SYNC;
DROP TABLE test_table_join_3 SYNC;
